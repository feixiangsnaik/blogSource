{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/img/testpic.jpg","path":"img/testpic.jpg","modified":1,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/article-title.md","hash":"cb7b5ff7ec60d7be3e813857d0fe037dc9c9ba7c","modified":1685254507944},{"_id":"source/_posts/css.md","hash":"ba74ed02faa9483b090c3a19db2fbda277b5aa72","modified":1685254507944},{"_id":"source/_posts/hexo操作.md","hash":"d3d10036c583f5585e82c8f97b31449a51d56d79","modified":1685254507944},{"_id":"source/_posts/js数组.md","hash":"43f7f800e564723635d4fe769bc1fa4300f675af","modified":1685254507944},{"_id":"source/_posts/docker.md","hash":"ba03a03bf3ae3de5f5ddae072cafc4f1f26749ec","modified":1685254507944},{"_id":"source/_posts/git常用命令.md","hash":"f4770e2c136ff9a99614e93eaba7e84730903c5d","modified":1685256165112},{"_id":"source/_posts/jwt.md","hash":"233f8cfb012b291bbad81ea381951c9c33622e45","modified":1685254507944},{"_id":"source/_posts/learn.md","hash":"17eb541c4f39732cacb2c19b882c26fe459ad7fe","modified":1685254507944},{"_id":"source/_posts/git操作.md","hash":"f018f106d477d43ff1cefe174c41a563f57b4319","modified":1685255779297},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1685254507944},{"_id":"source/_posts/less.md","hash":"0356f10db9e04f1af366590547df12244eb273d4","modified":1685254507944},{"_id":"source/_posts/markdown学习.md","hash":"b617d5bea38543fa308b5f005bfa3997db6384cf","modified":1685254507944},{"_id":"source/_posts/socketio.md","hash":"8bd9094d26c6616b4076dd45534ebd666e002531","modified":1685255443491},{"_id":"source/_posts/test2.md","hash":"19dc94108eb250b457f9c567cfe2f7cf8b8a09ca","modified":1685254507944},{"_id":"source/_posts/promise实现.md","hash":"ffaa53ddba6831207c3d877053b27b8a2cfa749a","modified":1685254507944},{"_id":"source/_posts/test3.md","hash":"42b0fc124a90f5d2ea0f3cf58f47d90295d9d427","modified":1685254507944},{"_id":"source/_posts/vscodeConfig.md","hash":"80eb3bfb88494419855c414f3f1f80e7c4ec318c","modified":1685254507944},{"_id":"source/_posts/vue知识点.md","hash":"6e4b1f869dbaa2a9e9082fca2f1b684f37c16fa0","modified":1685255478311},{"_id":"source/_posts/watermark.md","hash":"763204f68c72c7c2966709f6a8bd3b4dc5cb7399","modified":1685254507944},{"_id":"source/_posts/好网站.md","hash":"9f53b9ac65179bf98bccc9fab54204c79706dc4b","modified":1685254507944},{"_id":"source/_posts/正则常用.md","hash":"b282fb6bc33fd9041d99b0712cb0b50d8da967eb","modified":1685254507944},{"_id":"source/_posts/系统服务器命令.md","hash":"5b917e95f33c643ebc03dbaa9afa773395ca2b7a","modified":1685267138928},{"_id":"source/_posts/防抖节流.md","hash":"2361fee5f06d966753b1ab012a65fb3de6069e12","modified":1685254507944},{"_id":"source/img/testpic.jpg","hash":"6cf8cd942b9c75a0f9946225a70d892084f509ec","modified":1685254507944},{"_id":"themes/landscape/.npmignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1685254507960},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1685254507960},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1685254507960},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1685254507960},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1685254507960},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1685254507960},{"_id":"themes/landscape/_config.yml","hash":"ce9d2939245209b8f5c5bbbdadc917d86057d032","modified":1685254507960},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1685254507960},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1685254507960},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1685254507960},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1685254507960},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1685254507960},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1685254507960},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1685254507960},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1685254507960},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1685254507960},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1685254507960},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1685254507960},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1685254507960},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1685254507960},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1685254507960},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1685254507960},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1685254507960},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1685254507960},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1685254507960},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1685254507960},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1685254507960},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1685254507960},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1685254507960},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1685254507960},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1685254507960},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1685254507960},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1685254507960},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1685254507960},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1685254507960},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1685254507960},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1685254507960},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1685254507960},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1685254507960},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1685254507960},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1685254507960},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1685254507960},{"_id":"themes/landscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1685254507960},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1685254507960},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1685254507960},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1685254507960},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1685254507960},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1685254507960},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1685254507960},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1685254507960},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1685254507976},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1685254507960},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1685254507960},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1685254507976},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1685254507976},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1685254507960},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1685254507960},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1685254507960},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1685254507960},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1685254507960},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1685254507960},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1685254507960},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1685254507960},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1685254507960},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1685254507960},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1685254507960},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1685254507960},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1685254507960},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1685254507960},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1685254507960},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1685254507960},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1685254507960},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1685254507960},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1685254507960},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1685254507960},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1685254507960},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1685254507960},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1685254507960},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1685254507960},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1685254507960},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1685254507960},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1685254507960},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1685254507960},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1685254507960},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1685254507960},{"_id":"public/2023/05/28/系统服务器命令/index.html","hash":"e380dfacb89ad62c087b9be9c688fa6b6337ef83","modified":1685267145763},{"_id":"public/2023/05/28/git常用命令/index.html","hash":"3c2780e5fd57c17d279565248639dccec5e3dde4","modified":1685267145763},{"_id":"public/2023/05/28/socketio/index.html","hash":"f562a938c86a3ed5a7f0346d4938166caf95f608","modified":1685267145763},{"_id":"public/2023/05/28/vue知识点/index.html","hash":"e32d1b06a6823c08d57442e9003d3675b9355cc2","modified":1685267145763},{"_id":"public/2023/05/28/hello-world/index.html","hash":"e4a8c58e93789bcdc88bdb1bd5eead985a29b659","modified":1685267145763},{"_id":"public/2022/04/08/test3/index.html","hash":"c3a96e5376277560683f6e7c4ea806cdda4f592f","modified":1685267145763},{"_id":"public/2022/04/08/test2/index.html","hash":"f111121b4522a12934a542b99e21d07550a5b402","modified":1685267145763},{"_id":"public/2022/03/31/learn/index.html","hash":"737c600e5351bf6804ddec449139a3cd62a6234c","modified":1685267145763},{"_id":"public/2022/03/29/vscodeConfig/index.html","hash":"0297283bad0f9c184847876f2de1ee8f34937854","modified":1685267145763},{"_id":"public/2021/12/25/docker/index.html","hash":"c3739f597c8721d7c5178014999e2f976b364e02","modified":1685267145763},{"_id":"public/2021/12/23/正则常用/index.html","hash":"c5ee7288e5a591690c09f31917638f560622bfef","modified":1685267145763},{"_id":"public/2021/12/22/防抖节流/index.html","hash":"b2ae73fe7e24feed3eb1677acdb7e54a7f8dc861","modified":1685267145763},{"_id":"public/2021/12/22/promise实现/index.html","hash":"4d9800f55a4538ca3eb03bca04958c20bf0fdb28","modified":1685267145763},{"_id":"public/2021/12/20/watermark/index.html","hash":"824c70fcddba4ac781f12376250b354685fe48d6","modified":1685267145763},{"_id":"public/2021/12/16/hexo操作/index.html","hash":"f637b101604ca4da7e6c2f76e3a33dada9c98150","modified":1685267145763},{"_id":"public/2021/12/16/jwt/index.html","hash":"5f57b81f1b4bc41ae4ec98da14223f58225a15b4","modified":1685267145763},{"_id":"public/2021/11/26/好网站/index.html","hash":"ed1ae5da79a0259ec6270739d16f1b4b7b2ac24a","modified":1685267145763},{"_id":"public/2021/11/25/markdown学习/index.html","hash":"be4ad3102598c174ae90949f8c7fb45f424a68fd","modified":1685267145763},{"_id":"public/2021/11/25/git操作/index.html","hash":"5709320c2d93a6b058b1c892bb6a305bdc62f140","modified":1685267145763},{"_id":"public/2021/11/25/css/index.html","hash":"082f03c7a3714324330bce0d5920285915306a3d","modified":1685267145763},{"_id":"public/2021/11/25/js数组/index.html","hash":"6f56b76e2010159c9b2fd0edfaf8676d8d1d4c4e","modified":1685267145763},{"_id":"public/2021/11/25/less/index.html","hash":"428daeeccbf83b405e8db368f4c5ea8be6dd8819","modified":1685267145763},{"_id":"public/2021/11/16/article-title/index.html","hash":"489e54ca29a43c6e1099a5a8cc4ea76f91314f2a","modified":1685267145763},{"_id":"public/archives/index.html","hash":"b1558f21fe3eaf9aba5825040e1d472cc31d6cbf","modified":1685267145763},{"_id":"public/archives/page/2/index.html","hash":"61a5fb81b7e2d29e0569e83d7a8b67f98e9cb423","modified":1685267145763},{"_id":"public/archives/page/3/index.html","hash":"f22c970eb5ab6e268f24e6f71613b959512992aa","modified":1685267145763},{"_id":"public/archives/2021/index.html","hash":"8487708ef108e81ec46e527ff02c0b207649393f","modified":1685267145763},{"_id":"public/archives/2021/page/2/index.html","hash":"29be026edbea5f24ef660f80720226cd0ca88800","modified":1685267145763},{"_id":"public/archives/2021/11/index.html","hash":"fe263f1108c7d336c722839700b824c1aa7f3e94","modified":1685267145763},{"_id":"public/archives/2021/12/index.html","hash":"a64ad7260304394d131e0f14c1af0db870fd71df","modified":1685267145763},{"_id":"public/archives/2022/index.html","hash":"661d71c5273d7e8b887b5e57a43c740597531f8b","modified":1685267145763},{"_id":"public/archives/2022/03/index.html","hash":"d620c7798827b62f41befa0c944aa0035190034c","modified":1685267145763},{"_id":"public/archives/2022/04/index.html","hash":"aedc1a4d7955835ed6a74d834e78154b037db12c","modified":1685267145763},{"_id":"public/archives/2023/index.html","hash":"2627243456f3553a983d146cddb1453521bb4fd1","modified":1685267145763},{"_id":"public/archives/2023/05/index.html","hash":"9ce842983f4e3813cd5cfdc8c8dbc5f0c26be1a6","modified":1685267145763},{"_id":"public/page/3/index.html","hash":"350cc9de8f08b40c33dd9019caaa0345985b61ec","modified":1685267145763},{"_id":"public/index.html","hash":"81f56f9fa6868ff2b801fc6af6b43f697a9e2c06","modified":1685267145763},{"_id":"public/page/2/index.html","hash":"f8f5c7a225fa5bbcf5b3929339cc5078a1eb80fb","modified":1685267145763},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1685267145763},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1685267145763},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1685267145763},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1685267145763},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1685267145763},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1685267145763},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1685267145763},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1685267145763},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1685267145763},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1685267145763},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1685267145763},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1685267145763},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1685267145763},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1685267145763},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1685267145763},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1685267145763},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1685267145763},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1685267145763},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1685267145763},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1685267145763},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1685267145763},{"_id":"public/img/testpic.jpg","hash":"6cf8cd942b9c75a0f9946225a70d892084f509ec","modified":1685267145763},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1685267145763},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1685267145763}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"article title","date":"2021-11-16T05:20:17.000Z","_content":"","source":"_posts/article-title.md","raw":"---\ntitle: article title\ndate: 2021-11-16 13:20:17\ntags:\n---\n","slug":"article-title","published":1,"updated":"2023-05-28T06:15:07.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo4z00001s9i82f564qk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"docker","date":"2021-12-25T03:39:29.000Z","_content":"## 常规操作\nmac 安装：   brew install --cask docker \nhttps://stackoverflow.com/questions/40523307/brew-install-docker-does-not-include-docker-engine\ndocker版本查看   docker -v\n## 安装centos和宝塔\n\n1.docker pull centos\n2.docker run -i -t -d --name baota -p 20:20 -p 21:21 -p 80:80 -p 443:443 -p 888:888 -p 8888:8888 --privileged=true -v /home/www:/www centos     如果目录不能访问就换个目录比如（docker run -i -t -d --name baota -p 20:20 -p 21:21 -p 80:80 -p 443:443 -p 888:888 -p 8888:8888 --privileged=true -v /Users/zhangshuai/Desktop/installedsoftware/www:/www centos:7 /usr/sbin/init）\n3.docker exec -it baota /bin/bash\n## 宝塔安装\n4.yum install -y wget && wget -O install.sh http://download.bt.cn/install/install.sh && sh install.sh\ndocker->preferences->resource->file sharing\n\n## 删除所有已退出的容器\ndocker rm $(docker ps -q -f status=exited)\n\n删除所有已停止的容器\ndocker rm $(docker ps -a -q)\n\n## 删除所有正在运行和已停止的容器\n    docker stop $(docker ps -a -q)\n    docker rm $(docker ps -a -q)\n\n## 删除所有容器，没有任何标准\ndocker container rm $(docker container ps -aq)\n\n但是，在1.13及更高版本中，对于完整的系统和清理，我们可以直接使用以下命令，\ndocker system prune","source":"_posts/docker.md","raw":"---\ntitle: docker\ndate: 2021-12-25 11:39:29\ntags:\n---\n## 常规操作\nmac 安装：   brew install --cask docker \nhttps://stackoverflow.com/questions/40523307/brew-install-docker-does-not-include-docker-engine\ndocker版本查看   docker -v\n## 安装centos和宝塔\n\n1.docker pull centos\n2.docker run -i -t -d --name baota -p 20:20 -p 21:21 -p 80:80 -p 443:443 -p 888:888 -p 8888:8888 --privileged=true -v /home/www:/www centos     如果目录不能访问就换个目录比如（docker run -i -t -d --name baota -p 20:20 -p 21:21 -p 80:80 -p 443:443 -p 888:888 -p 8888:8888 --privileged=true -v /Users/zhangshuai/Desktop/installedsoftware/www:/www centos:7 /usr/sbin/init）\n3.docker exec -it baota /bin/bash\n## 宝塔安装\n4.yum install -y wget && wget -O install.sh http://download.bt.cn/install/install.sh && sh install.sh\ndocker->preferences->resource->file sharing\n\n## 删除所有已退出的容器\ndocker rm $(docker ps -q -f status=exited)\n\n删除所有已停止的容器\ndocker rm $(docker ps -a -q)\n\n## 删除所有正在运行和已停止的容器\n    docker stop $(docker ps -a -q)\n    docker rm $(docker ps -a -q)\n\n## 删除所有容器，没有任何标准\ndocker container rm $(docker container ps -aq)\n\n但是，在1.13及更高版本中，对于完整的系统和清理，我们可以直接使用以下命令，\ndocker system prune","slug":"docker","published":1,"updated":"2023-05-28T06:15:07.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo5200011s9i6nrcb9cb","content":"<h2 id=\"常规操作\"><a href=\"#常规操作\" class=\"headerlink\" title=\"常规操作\"></a>常规操作</h2><p>mac 安装：   brew install –cask docker<br><a href=\"https://stackoverflow.com/questions/40523307/brew-install-docker-does-not-include-docker-engine\">https://stackoverflow.com/questions/40523307/brew-install-docker-does-not-include-docker-engine</a><br>docker版本查看   docker -v</p>\n<h2 id=\"安装centos和宝塔\"><a href=\"#安装centos和宝塔\" class=\"headerlink\" title=\"安装centos和宝塔\"></a>安装centos和宝塔</h2><p>1.docker pull centos<br>2.docker run -i -t -d –name baota -p 20:20 -p 21:21 -p 80:80 -p 443:443 -p 888:888 -p 8888:8888 –privileged=true -v /home/www:/www centos     如果目录不能访问就换个目录比如（docker run -i -t -d –name baota -p 20:20 -p 21:21 -p 80:80 -p 443:443 -p 888:888 -p 8888:8888 –privileged=true -v /Users/zhangshuai/Desktop/installedsoftware/www:/www centos:7 /usr/sbin/init）<br>3.docker exec -it baota /bin/bash</p>\n<h2 id=\"宝塔安装\"><a href=\"#宝塔安装\" class=\"headerlink\" title=\"宝塔安装\"></a>宝塔安装</h2><p>4.yum install -y wget &amp;&amp; wget -O install.sh <a href=\"http://download.bt.cn/install/install.sh\">http://download.bt.cn/install/install.sh</a> &amp;&amp; sh install.sh<br>docker-&gt;preferences-&gt;resource-&gt;file sharing</p>\n<h2 id=\"删除所有已退出的容器\"><a href=\"#删除所有已退出的容器\" class=\"headerlink\" title=\"删除所有已退出的容器\"></a>删除所有已退出的容器</h2><p>docker rm $(docker ps -q -f status=exited)</p>\n<p>删除所有已停止的容器<br>docker rm $(docker ps -a -q)</p>\n<h2 id=\"删除所有正在运行和已停止的容器\"><a href=\"#删除所有正在运行和已停止的容器\" class=\"headerlink\" title=\"删除所有正在运行和已停止的容器\"></a>删除所有正在运行和已停止的容器</h2><pre><code>docker stop $(docker ps -a -q)\ndocker rm $(docker ps -a -q)\n</code></pre>\n<h2 id=\"删除所有容器，没有任何标准\"><a href=\"#删除所有容器，没有任何标准\" class=\"headerlink\" title=\"删除所有容器，没有任何标准\"></a>删除所有容器，没有任何标准</h2><p>docker container rm $(docker container ps -aq)</p>\n<p>但是，在1.13及更高版本中，对于完整的系统和清理，我们可以直接使用以下命令，<br>docker system prune</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"常规操作\"><a href=\"#常规操作\" class=\"headerlink\" title=\"常规操作\"></a>常规操作</h2><p>mac 安装：   brew install –cask docker<br><a href=\"https://stackoverflow.com/questions/40523307/brew-install-docker-does-not-include-docker-engine\">https://stackoverflow.com/questions/40523307/brew-install-docker-does-not-include-docker-engine</a><br>docker版本查看   docker -v</p>\n<h2 id=\"安装centos和宝塔\"><a href=\"#安装centos和宝塔\" class=\"headerlink\" title=\"安装centos和宝塔\"></a>安装centos和宝塔</h2><p>1.docker pull centos<br>2.docker run -i -t -d –name baota -p 20:20 -p 21:21 -p 80:80 -p 443:443 -p 888:888 -p 8888:8888 –privileged=true -v /home/www:/www centos     如果目录不能访问就换个目录比如（docker run -i -t -d –name baota -p 20:20 -p 21:21 -p 80:80 -p 443:443 -p 888:888 -p 8888:8888 –privileged=true -v /Users/zhangshuai/Desktop/installedsoftware/www:/www centos:7 /usr/sbin/init）<br>3.docker exec -it baota /bin/bash</p>\n<h2 id=\"宝塔安装\"><a href=\"#宝塔安装\" class=\"headerlink\" title=\"宝塔安装\"></a>宝塔安装</h2><p>4.yum install -y wget &amp;&amp; wget -O install.sh <a href=\"http://download.bt.cn/install/install.sh\">http://download.bt.cn/install/install.sh</a> &amp;&amp; sh install.sh<br>docker-&gt;preferences-&gt;resource-&gt;file sharing</p>\n<h2 id=\"删除所有已退出的容器\"><a href=\"#删除所有已退出的容器\" class=\"headerlink\" title=\"删除所有已退出的容器\"></a>删除所有已退出的容器</h2><p>docker rm $(docker ps -q -f status=exited)</p>\n<p>删除所有已停止的容器<br>docker rm $(docker ps -a -q)</p>\n<h2 id=\"删除所有正在运行和已停止的容器\"><a href=\"#删除所有正在运行和已停止的容器\" class=\"headerlink\" title=\"删除所有正在运行和已停止的容器\"></a>删除所有正在运行和已停止的容器</h2><pre><code>docker stop $(docker ps -a -q)\ndocker rm $(docker ps -a -q)\n</code></pre>\n<h2 id=\"删除所有容器，没有任何标准\"><a href=\"#删除所有容器，没有任何标准\" class=\"headerlink\" title=\"删除所有容器，没有任何标准\"></a>删除所有容器，没有任何标准</h2><p>docker container rm $(docker container ps -aq)</p>\n<p>但是，在1.13及更高版本中，对于完整的系统和清理，我们可以直接使用以下命令，<br>docker system prune</p>\n"},{"title":"css","date":"2021-11-25T09:23:01.000Z","_content":"","source":"_posts/css.md","raw":"---\ntitle: css\ndate: 2021-11-25 17:23:01\ntags:\n---\n","slug":"css","published":1,"updated":"2023-05-28T06:15:07.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo5300021s9iavn63qdu","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"hexo操作","date":"2021-12-16T08:22:03.000Z","_content":"## 发布命令\n    hexo clean && hexo g && hexo d\n## 新建文章\n    hexo new articleTest\n## 搭建步骤\n//第一条   安装hexo的基础框架，如果很慢的话，可以考虑挂下梯子，或者换个源\n     npm install -g hexo\n     \n     //第二条   初始化hexo框架 这个可能会比较慢\n     hexo init\n     \n     //第三条 安装所需要的组件\n     npm install\n     \n     //第四条 编译生成静态页面\n     hexo g\n     \n     //第五条 启动本地服务\n     hexo s\n\n合并：1.     npm install -g hexo && hexo init && npm install &&npm i hexo-deployer-git && hexo g && hexo s \ngit 步骤：2.git config --global user.name 'feixiangsnaik' &&git config --global user.email 'feixiangsnail@gmail.com'&&ssh-keygen -t rsa -C 'feixiangsnail@gmail.com'    然后回车到底，把pub的内容拷贝到github ssh里面。\n3.deploy:\n  type: git\n  repository: https://github.com/feixiangsnaik/feixiangsnaik.github.io\n  branch: master\n把上面代码添加到config.xml最下面\n4.hexo new post \"article title\"新建文章，然后 hexo g && hexo s &&hexo d（或者清除缓存，每次修改配置文件后都要执行该命令\n  hexo clean\n  \n  // 生成静态页面文件，每次clean后也要重新生成\n  hexo g\n  \n  // 向仓库推送文件\n  hexo d）\n合并：hexo clean && hexo g && hexo d","source":"_posts/hexo操作.md","raw":"---\ntitle: hexo操作\ndate: 2021-12-16 16:22:03\ntags:\n---\n## 发布命令\n    hexo clean && hexo g && hexo d\n## 新建文章\n    hexo new articleTest\n## 搭建步骤\n//第一条   安装hexo的基础框架，如果很慢的话，可以考虑挂下梯子，或者换个源\n     npm install -g hexo\n     \n     //第二条   初始化hexo框架 这个可能会比较慢\n     hexo init\n     \n     //第三条 安装所需要的组件\n     npm install\n     \n     //第四条 编译生成静态页面\n     hexo g\n     \n     //第五条 启动本地服务\n     hexo s\n\n合并：1.     npm install -g hexo && hexo init && npm install &&npm i hexo-deployer-git && hexo g && hexo s \ngit 步骤：2.git config --global user.name 'feixiangsnaik' &&git config --global user.email 'feixiangsnail@gmail.com'&&ssh-keygen -t rsa -C 'feixiangsnail@gmail.com'    然后回车到底，把pub的内容拷贝到github ssh里面。\n3.deploy:\n  type: git\n  repository: https://github.com/feixiangsnaik/feixiangsnaik.github.io\n  branch: master\n把上面代码添加到config.xml最下面\n4.hexo new post \"article title\"新建文章，然后 hexo g && hexo s &&hexo d（或者清除缓存，每次修改配置文件后都要执行该命令\n  hexo clean\n  \n  // 生成静态页面文件，每次clean后也要重新生成\n  hexo g\n  \n  // 向仓库推送文件\n  hexo d）\n合并：hexo clean && hexo g && hexo d","slug":"hexo操作","published":1,"updated":"2023-05-28T06:15:07.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo5400031s9i0vuk1dot","content":"<h2 id=\"发布命令\"><a href=\"#发布命令\" class=\"headerlink\" title=\"发布命令\"></a>发布命令</h2><pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d\n</code></pre>\n<h2 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h2><pre><code>hexo new articleTest\n</code></pre>\n<h2 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h2><p>//第一条   安装hexo的基础框架，如果很慢的话，可以考虑挂下梯子，或者换个源<br>     npm install -g hexo</p>\n<pre><code> //第二条   初始化hexo框架 这个可能会比较慢\n hexo init\n \n //第三条 安装所需要的组件\n npm install\n \n //第四条 编译生成静态页面\n hexo g\n \n //第五条 启动本地服务\n hexo s\n</code></pre>\n<p>合并：1.     npm install -g hexo &amp;&amp; hexo init &amp;&amp; npm install &amp;&amp;npm i hexo-deployer-git &amp;&amp; hexo g &amp;&amp; hexo s<br>git 步骤：2.git config –global user.name ‘feixiangsnaik’ &amp;&amp;git config –global user.email ‘<a href=\"mailto:&#102;&#x65;&#x69;&#120;&#x69;&#97;&#x6e;&#103;&#x73;&#110;&#x61;&#x69;&#108;&#64;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;\">&#102;&#x65;&#x69;&#120;&#x69;&#97;&#x6e;&#103;&#x73;&#110;&#x61;&#x69;&#108;&#64;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;</a>‘&amp;&amp;ssh-keygen -t rsa -C ‘<a href=\"mailto:&#x66;&#101;&#105;&#x78;&#x69;&#x61;&#110;&#x67;&#x73;&#x6e;&#x61;&#105;&#x6c;&#64;&#x67;&#x6d;&#x61;&#x69;&#108;&#46;&#99;&#111;&#109;\">&#x66;&#101;&#105;&#x78;&#x69;&#x61;&#110;&#x67;&#x73;&#x6e;&#x61;&#105;&#x6c;&#64;&#x67;&#x6d;&#x61;&#x69;&#108;&#46;&#99;&#111;&#109;</a>‘    然后回车到底，把pub的内容拷贝到github ssh里面。<br>3.deploy:<br>  type: git<br>  repository: <a href=\"https://github.com/feixiangsnaik/feixiangsnaik.github.io\">https://github.com/feixiangsnaik/feixiangsnaik.github.io</a><br>  branch: master<br>把上面代码添加到config.xml最下面<br>4.hexo new post “article title”新建文章，然后 hexo g &amp;&amp; hexo s &amp;&amp;hexo d（或者清除缓存，每次修改配置文件后都要执行该命令<br>  hexo clean</p>\n<p>  // 生成静态页面文件，每次clean后也要重新生成<br>  hexo g</p>\n<p>  // 向仓库推送文件<br>  hexo d）<br>合并：hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"发布命令\"><a href=\"#发布命令\" class=\"headerlink\" title=\"发布命令\"></a>发布命令</h2><pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d\n</code></pre>\n<h2 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h2><pre><code>hexo new articleTest\n</code></pre>\n<h2 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h2><p>//第一条   安装hexo的基础框架，如果很慢的话，可以考虑挂下梯子，或者换个源<br>     npm install -g hexo</p>\n<pre><code> //第二条   初始化hexo框架 这个可能会比较慢\n hexo init\n \n //第三条 安装所需要的组件\n npm install\n \n //第四条 编译生成静态页面\n hexo g\n \n //第五条 启动本地服务\n hexo s\n</code></pre>\n<p>合并：1.     npm install -g hexo &amp;&amp; hexo init &amp;&amp; npm install &amp;&amp;npm i hexo-deployer-git &amp;&amp; hexo g &amp;&amp; hexo s<br>git 步骤：2.git config –global user.name ‘feixiangsnaik’ &amp;&amp;git config –global user.email ‘<a href=\"mailto:&#102;&#x65;&#x69;&#120;&#x69;&#97;&#x6e;&#103;&#x73;&#110;&#x61;&#x69;&#108;&#64;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;\">&#102;&#x65;&#x69;&#120;&#x69;&#97;&#x6e;&#103;&#x73;&#110;&#x61;&#x69;&#108;&#64;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;</a>‘&amp;&amp;ssh-keygen -t rsa -C ‘<a href=\"mailto:&#x66;&#101;&#105;&#x78;&#x69;&#x61;&#110;&#x67;&#x73;&#x6e;&#x61;&#105;&#x6c;&#64;&#x67;&#x6d;&#x61;&#x69;&#108;&#46;&#99;&#111;&#109;\">&#x66;&#101;&#105;&#x78;&#x69;&#x61;&#110;&#x67;&#x73;&#x6e;&#x61;&#105;&#x6c;&#64;&#x67;&#x6d;&#x61;&#x69;&#108;&#46;&#99;&#111;&#109;</a>‘    然后回车到底，把pub的内容拷贝到github ssh里面。<br>3.deploy:<br>  type: git<br>  repository: <a href=\"https://github.com/feixiangsnaik/feixiangsnaik.github.io\">https://github.com/feixiangsnaik/feixiangsnaik.github.io</a><br>  branch: master<br>把上面代码添加到config.xml最下面<br>4.hexo new post “article title”新建文章，然后 hexo g &amp;&amp; hexo s &amp;&amp;hexo d（或者清除缓存，每次修改配置文件后都要执行该命令<br>  hexo clean</p>\n<p>  // 生成静态页面文件，每次clean后也要重新生成<br>  hexo g</p>\n<p>  // 向仓库推送文件<br>  hexo d）<br>合并：hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p>\n"},{"title":"git常用命令","date":"2023-05-28T06:37:22.000Z","_content":"\n## 1. 修改分支名\n1. 修改本地分支名称\n`git branch -m oldBranchName newBranchName`\n\n2. 将本地分支的远程分支删除\n`git push origin :oldBranchName`\n\n1. 将改名后的本地分支推送到远程，并将本地分支与之关联\n`git push --set-upstream origin newBranchName `","source":"_posts/git常用命令.md","raw":"---\ntitle: git常用命令\ndate: 2023-05-28 14:37:22\ntags:\n---\n\n## 1. 修改分支名\n1. 修改本地分支名称\n`git branch -m oldBranchName newBranchName`\n\n2. 将本地分支的远程分支删除\n`git push origin :oldBranchName`\n\n1. 将改名后的本地分支推送到远程，并将本地分支与之关联\n`git push --set-upstream origin newBranchName `","slug":"git常用命令","published":1,"updated":"2023-05-28T06:42:45.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo5400041s9igibtfbdn","content":"<h2 id=\"1-修改分支名\"><a href=\"#1-修改分支名\" class=\"headerlink\" title=\"1. 修改分支名\"></a>1. 修改分支名</h2><ol>\n<li><p>修改本地分支名称<br><code>git branch -m oldBranchName newBranchName</code></p>\n</li>\n<li><p>将本地分支的远程分支删除<br><code>git push origin :oldBranchName</code></p>\n</li>\n<li><p>将改名后的本地分支推送到远程，并将本地分支与之关联<br><code>git push --set-upstream origin newBranchName </code></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-修改分支名\"><a href=\"#1-修改分支名\" class=\"headerlink\" title=\"1. 修改分支名\"></a>1. 修改分支名</h2><ol>\n<li><p>修改本地分支名称<br><code>git branch -m oldBranchName newBranchName</code></p>\n</li>\n<li><p>将本地分支的远程分支删除<br><code>git push origin :oldBranchName</code></p>\n</li>\n<li><p>将改名后的本地分支推送到远程，并将本地分支与之关联<br><code>git push --set-upstream origin newBranchName </code></p>\n</li>\n</ol>\n"},{"title":"js数组","date":"2021-11-25T09:22:55.000Z","_content":"## splice \n### 删除某个数组元素,原数组改变，返回被删除或者被替换的哪个。\n```\nlet a = [1,2,3,4,5]\nlet b = [1,2,3,4,5]\n//如果想删除3，就找到第三项，删除1个（下标，个数），如果想替换，那么第三个参数是添加到删除的位置处\nlet aa = a.splice(2,1) //删除3\nlet bb = b.splice(2,1,'hello') //把3换成hello\nconsole.log(a,b,aa,bb)\n```\n## slice \n### 原数组不变，返回数组为截取的\n```\nlet a = [1,2,3,4,5]\nlet b = a.slice(1,-1)\nconsole.log(a,b,'ab')\n//a=[1,2,3,4,5] b=[2,3,4]\n```\n## map\n### 返回一个新数组，内容只包括返回的值。\n    var nn = [ { a: 'ss',b:'b1' },{ a: 'aa',b:'b2' },{ a : '11',b:'b3'} ] \n    var index = nn.map(item =>{ return {d:item.a,b:item.b}})\n    console.log(index) [{d:'ss',b:'b1'},...]\n    //返回指定某个元素的下标\n    var nn = [ { a: 'ss' },{ a: 'aa' },{ a : '11'},{ a: '33' },{ a: '88' } ] \n    var index = nn.map(item => item.a).indexOf(33)\n    console.log(index)\n## findIndexOf\n  1. 查找对象数组，然后返回指定内容的对象所在的索引。\n## every\n  1. 如果每个都满足，那么就返回true","source":"_posts/js数组.md","raw":"---\ntitle: js数组\ndate: 2021-11-25 17:22:55\ntags:\n---\n## splice \n### 删除某个数组元素,原数组改变，返回被删除或者被替换的哪个。\n```\nlet a = [1,2,3,4,5]\nlet b = [1,2,3,4,5]\n//如果想删除3，就找到第三项，删除1个（下标，个数），如果想替换，那么第三个参数是添加到删除的位置处\nlet aa = a.splice(2,1) //删除3\nlet bb = b.splice(2,1,'hello') //把3换成hello\nconsole.log(a,b,aa,bb)\n```\n## slice \n### 原数组不变，返回数组为截取的\n```\nlet a = [1,2,3,4,5]\nlet b = a.slice(1,-1)\nconsole.log(a,b,'ab')\n//a=[1,2,3,4,5] b=[2,3,4]\n```\n## map\n### 返回一个新数组，内容只包括返回的值。\n    var nn = [ { a: 'ss',b:'b1' },{ a: 'aa',b:'b2' },{ a : '11',b:'b3'} ] \n    var index = nn.map(item =>{ return {d:item.a,b:item.b}})\n    console.log(index) [{d:'ss',b:'b1'},...]\n    //返回指定某个元素的下标\n    var nn = [ { a: 'ss' },{ a: 'aa' },{ a : '11'},{ a: '33' },{ a: '88' } ] \n    var index = nn.map(item => item.a).indexOf(33)\n    console.log(index)\n## findIndexOf\n  1. 查找对象数组，然后返回指定内容的对象所在的索引。\n## every\n  1. 如果每个都满足，那么就返回true","slug":"js数组","published":1,"updated":"2023-05-28T06:15:07.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo5500051s9igvjt8q84","content":"<h2 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice\"></a>splice</h2><h3 id=\"删除某个数组元素-原数组改变，返回被删除或者被替换的哪个。\"><a href=\"#删除某个数组元素-原数组改变，返回被删除或者被替换的哪个。\" class=\"headerlink\" title=\"删除某个数组元素,原数组改变，返回被删除或者被替换的哪个。\"></a>删除某个数组元素,原数组改变，返回被删除或者被替换的哪个。</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = [1,2,3,4,5]</span><br><span class=\"line\">let b = [1,2,3,4,5]</span><br><span class=\"line\">//如果想删除3，就找到第三项，删除1个（下标，个数），如果想替换，那么第三个参数是添加到删除的位置处</span><br><span class=\"line\">let aa = a.splice(2,1) //删除3</span><br><span class=\"line\">let bb = b.splice(2,1,&#x27;hello&#x27;) //把3换成hello</span><br><span class=\"line\">console.log(a,b,aa,bb)</span><br></pre></td></tr></table></figure>\n<h2 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice\"></a>slice</h2><h3 id=\"原数组不变，返回数组为截取的\"><a href=\"#原数组不变，返回数组为截取的\" class=\"headerlink\" title=\"原数组不变，返回数组为截取的\"></a>原数组不变，返回数组为截取的</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = [1,2,3,4,5]</span><br><span class=\"line\">let b = a.slice(1,-1)</span><br><span class=\"line\">console.log(a,b,&#x27;ab&#x27;)</span><br><span class=\"line\">//a=[1,2,3,4,5] b=[2,3,4]</span><br></pre></td></tr></table></figure>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><h3 id=\"返回一个新数组，内容只包括返回的值。\"><a href=\"#返回一个新数组，内容只包括返回的值。\" class=\"headerlink\" title=\"返回一个新数组，内容只包括返回的值。\"></a>返回一个新数组，内容只包括返回的值。</h3><pre><code>var nn = [ &#123; a: &#39;ss&#39;,b:&#39;b1&#39; &#125;,&#123; a: &#39;aa&#39;,b:&#39;b2&#39; &#125;,&#123; a : &#39;11&#39;,b:&#39;b3&#39;&#125; ] \nvar index = nn.map(item =&gt;&#123; return &#123;d:item.a,b:item.b&#125;&#125;)\nconsole.log(index) [&#123;d:&#39;ss&#39;,b:&#39;b1&#39;&#125;,...]\n//返回指定某个元素的下标\nvar nn = [ &#123; a: &#39;ss&#39; &#125;,&#123; a: &#39;aa&#39; &#125;,&#123; a : &#39;11&#39;&#125;,&#123; a: &#39;33&#39; &#125;,&#123; a: &#39;88&#39; &#125; ] \nvar index = nn.map(item =&gt; item.a).indexOf(33)\nconsole.log(index)\n</code></pre>\n<h2 id=\"findIndexOf\"><a href=\"#findIndexOf\" class=\"headerlink\" title=\"findIndexOf\"></a>findIndexOf</h2><ol>\n<li>查找对象数组，然后返回指定内容的对象所在的索引。<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every\"></a>every</h2></li>\n<li>如果每个都满足，那么就返回true</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice\"></a>splice</h2><h3 id=\"删除某个数组元素-原数组改变，返回被删除或者被替换的哪个。\"><a href=\"#删除某个数组元素-原数组改变，返回被删除或者被替换的哪个。\" class=\"headerlink\" title=\"删除某个数组元素,原数组改变，返回被删除或者被替换的哪个。\"></a>删除某个数组元素,原数组改变，返回被删除或者被替换的哪个。</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = [1,2,3,4,5]</span><br><span class=\"line\">let b = [1,2,3,4,5]</span><br><span class=\"line\">//如果想删除3，就找到第三项，删除1个（下标，个数），如果想替换，那么第三个参数是添加到删除的位置处</span><br><span class=\"line\">let aa = a.splice(2,1) //删除3</span><br><span class=\"line\">let bb = b.splice(2,1,&#x27;hello&#x27;) //把3换成hello</span><br><span class=\"line\">console.log(a,b,aa,bb)</span><br></pre></td></tr></table></figure>\n<h2 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice\"></a>slice</h2><h3 id=\"原数组不变，返回数组为截取的\"><a href=\"#原数组不变，返回数组为截取的\" class=\"headerlink\" title=\"原数组不变，返回数组为截取的\"></a>原数组不变，返回数组为截取的</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = [1,2,3,4,5]</span><br><span class=\"line\">let b = a.slice(1,-1)</span><br><span class=\"line\">console.log(a,b,&#x27;ab&#x27;)</span><br><span class=\"line\">//a=[1,2,3,4,5] b=[2,3,4]</span><br></pre></td></tr></table></figure>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><h3 id=\"返回一个新数组，内容只包括返回的值。\"><a href=\"#返回一个新数组，内容只包括返回的值。\" class=\"headerlink\" title=\"返回一个新数组，内容只包括返回的值。\"></a>返回一个新数组，内容只包括返回的值。</h3><pre><code>var nn = [ &#123; a: &#39;ss&#39;,b:&#39;b1&#39; &#125;,&#123; a: &#39;aa&#39;,b:&#39;b2&#39; &#125;,&#123; a : &#39;11&#39;,b:&#39;b3&#39;&#125; ] \nvar index = nn.map(item =&gt;&#123; return &#123;d:item.a,b:item.b&#125;&#125;)\nconsole.log(index) [&#123;d:&#39;ss&#39;,b:&#39;b1&#39;&#125;,...]\n//返回指定某个元素的下标\nvar nn = [ &#123; a: &#39;ss&#39; &#125;,&#123; a: &#39;aa&#39; &#125;,&#123; a : &#39;11&#39;&#125;,&#123; a: &#39;33&#39; &#125;,&#123; a: &#39;88&#39; &#125; ] \nvar index = nn.map(item =&gt; item.a).indexOf(33)\nconsole.log(index)\n</code></pre>\n<h2 id=\"findIndexOf\"><a href=\"#findIndexOf\" class=\"headerlink\" title=\"findIndexOf\"></a>findIndexOf</h2><ol>\n<li>查找对象数组，然后返回指定内容的对象所在的索引。<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every\"></a>every</h2></li>\n<li>如果每个都满足，那么就返回true</li>\n</ol>\n"},{"title":"jwt","date":"2021-12-16T08:15:18.000Z","_content":"## 示例代码\n    let Koa = require('koa');\n    let Router = require('koa-router');\n    let bodyparser = require('koa-bodyparser');\n    let jwt = require('jwt-simple');\n    let router = new Router()\n    let app = new Koa();\n    app.use(bodyparser());\n    // 可以自己自定义\n    let secret = 'zhenglei';\n    // 验证是否登陆\n    router.post('/login',async(ctx)=>{ \n        let {username,password} = ctx.request.body;\n        if(username === 'admin' && password === 'admin'){\n          // 通常会查数据库，这里简单的演示\n          let token =  jwt.encode(username, secret);\n          ctx.body = {\n                code:200,\n                username,\n                token,\n          }\n        }\n    });\n    // 验证是否有权限\n    router.get('/validate',async(ctx)=>{ \n        let Authorization = ctx.get('authorization')\n        let [,token] = Authorization.split(' ');\n        if(token){\n            try{\n                let r = jwt.decode(token,secret);\n                ctx.body = {\n                    code:200,\n                    username:r,\n                    token\n                }\n            }catch(e){\n                ctx.body = {\n                    code:401,\n                    data:'没有登陆'\n                }\n            }\n        }else{\n            ctx.body = {\n                code:401,\n                data:'没有登陆'\n            }\n        }\n      \n    });\n    app.use(router.routes());\n    app.listen(4000);\n\n作者：腾讯IMWeb团队\n链接：https://juejin.cn/post/6873700061000237069\n来源：稀土掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","source":"_posts/jwt.md","raw":"---\ntitle: jwt\ndate: 2021-12-16 16:15:18\ntags:\n---\n## 示例代码\n    let Koa = require('koa');\n    let Router = require('koa-router');\n    let bodyparser = require('koa-bodyparser');\n    let jwt = require('jwt-simple');\n    let router = new Router()\n    let app = new Koa();\n    app.use(bodyparser());\n    // 可以自己自定义\n    let secret = 'zhenglei';\n    // 验证是否登陆\n    router.post('/login',async(ctx)=>{ \n        let {username,password} = ctx.request.body;\n        if(username === 'admin' && password === 'admin'){\n          // 通常会查数据库，这里简单的演示\n          let token =  jwt.encode(username, secret);\n          ctx.body = {\n                code:200,\n                username,\n                token,\n          }\n        }\n    });\n    // 验证是否有权限\n    router.get('/validate',async(ctx)=>{ \n        let Authorization = ctx.get('authorization')\n        let [,token] = Authorization.split(' ');\n        if(token){\n            try{\n                let r = jwt.decode(token,secret);\n                ctx.body = {\n                    code:200,\n                    username:r,\n                    token\n                }\n            }catch(e){\n                ctx.body = {\n                    code:401,\n                    data:'没有登陆'\n                }\n            }\n        }else{\n            ctx.body = {\n                code:401,\n                data:'没有登陆'\n            }\n        }\n      \n    });\n    app.use(router.routes());\n    app.listen(4000);\n\n作者：腾讯IMWeb团队\n链接：https://juejin.cn/post/6873700061000237069\n来源：稀土掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","slug":"jwt","published":1,"updated":"2023-05-28T06:15:07.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo5500061s9i26ei587o","content":"<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><pre><code>let Koa = require(&#39;koa&#39;);\nlet Router = require(&#39;koa-router&#39;);\nlet bodyparser = require(&#39;koa-bodyparser&#39;);\nlet jwt = require(&#39;jwt-simple&#39;);\nlet router = new Router()\nlet app = new Koa();\napp.use(bodyparser());\n// 可以自己自定义\nlet secret = &#39;zhenglei&#39;;\n// 验证是否登陆\nrouter.post(&#39;/login&#39;,async(ctx)=&gt;&#123; \n    let &#123;username,password&#125; = ctx.request.body;\n    if(username === &#39;admin&#39; &amp;&amp; password === &#39;admin&#39;)&#123;\n      // 通常会查数据库，这里简单的演示\n      let token =  jwt.encode(username, secret);\n      ctx.body = &#123;\n            code:200,\n            username,\n            token,\n      &#125;\n    &#125;\n&#125;);\n// 验证是否有权限\nrouter.get(&#39;/validate&#39;,async(ctx)=&gt;&#123; \n    let Authorization = ctx.get(&#39;authorization&#39;)\n    let [,token] = Authorization.split(&#39; &#39;);\n    if(token)&#123;\n        try&#123;\n            let r = jwt.decode(token,secret);\n            ctx.body = &#123;\n                code:200,\n                username:r,\n                token\n            &#125;\n        &#125;catch(e)&#123;\n            ctx.body = &#123;\n                code:401,\n                data:&#39;没有登陆&#39;\n            &#125;\n        &#125;\n    &#125;else&#123;\n        ctx.body = &#123;\n            code:401,\n            data:&#39;没有登陆&#39;\n        &#125;\n    &#125;\n  \n&#125;);\napp.use(router.routes());\napp.listen(4000);\n</code></pre>\n<p>作者：腾讯IMWeb团队<br>链接：<a href=\"https://juejin.cn/post/6873700061000237069\">https://juejin.cn/post/6873700061000237069</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><pre><code>let Koa = require(&#39;koa&#39;);\nlet Router = require(&#39;koa-router&#39;);\nlet bodyparser = require(&#39;koa-bodyparser&#39;);\nlet jwt = require(&#39;jwt-simple&#39;);\nlet router = new Router()\nlet app = new Koa();\napp.use(bodyparser());\n// 可以自己自定义\nlet secret = &#39;zhenglei&#39;;\n// 验证是否登陆\nrouter.post(&#39;/login&#39;,async(ctx)=&gt;&#123; \n    let &#123;username,password&#125; = ctx.request.body;\n    if(username === &#39;admin&#39; &amp;&amp; password === &#39;admin&#39;)&#123;\n      // 通常会查数据库，这里简单的演示\n      let token =  jwt.encode(username, secret);\n      ctx.body = &#123;\n            code:200,\n            username,\n            token,\n      &#125;\n    &#125;\n&#125;);\n// 验证是否有权限\nrouter.get(&#39;/validate&#39;,async(ctx)=&gt;&#123; \n    let Authorization = ctx.get(&#39;authorization&#39;)\n    let [,token] = Authorization.split(&#39; &#39;);\n    if(token)&#123;\n        try&#123;\n            let r = jwt.decode(token,secret);\n            ctx.body = &#123;\n                code:200,\n                username:r,\n                token\n            &#125;\n        &#125;catch(e)&#123;\n            ctx.body = &#123;\n                code:401,\n                data:&#39;没有登陆&#39;\n            &#125;\n        &#125;\n    &#125;else&#123;\n        ctx.body = &#123;\n            code:401,\n            data:&#39;没有登陆&#39;\n        &#125;\n    &#125;\n  \n&#125;);\napp.use(router.routes());\napp.listen(4000);\n</code></pre>\n<p>作者：腾讯IMWeb团队<br>链接：<a href=\"https://juejin.cn/post/6873700061000237069\">https://juejin.cn/post/6873700061000237069</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n"},{"title":"learn","date":"2022-03-31T03:24:04.000Z","_content":"","source":"_posts/learn.md","raw":"---\ntitle: learn\ndate: 2022-03-31 11:24:04\ntags:\n---\n","slug":"learn","published":1,"updated":"2023-05-28T06:15:07.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo5600071s9i3iq71gek","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"git操作","date":"2021-11-25T11:03:51.000Z","_content":"## 1.基础和常用命令\ngit三个区域（工作区，暂存区（git add),版本库(git commit )\n1.git init,git status,git add .,git commit -m 'jilu',git config --global user.email,git config --global user.name\n2.git log/reflog .   git reset --hard '提交编号'\n\n## 2.添加到远程\n第一次添加到远程：\ngit init\ngit remote add origin https://github.com/feixiangsnaik/feixiangsnaik.io.git\ngit pull --rebase origin main\ngit push -u origin main\n\n## 常见报错\n二、常见报错处理\n1、导致报错:error: You have not concluded your merge (MERGE_HEAD exists).的原因可能是在以前pull下来的代码自动合并失败。\n　　解决方案一：保留本地的更改，中止合并->重新合并->重新拉取\n$:git merge --abort\n$:git reset --merge\n$:git pull\n　　git pull之后然后重新解决冲突，再push，（记得需要稍微跟自己push的要有一点区别，要不然又会造成这样的情况）\n　　解决方案二：舍弃本地代码，远端版本覆盖本地版本（慎重）\n$:git fetch --all\n$:git reset --hard origin/master\n$:git fetch\n2、Git fetch和git pull的区别\n　　都可以从远程获取最新版本到本地\n　　git fetch：只是从远程获取最新版本到本地，不会merge(合并)\n$:git fetch origin master   //从远程的origin的master主分支上获取最新版本到origin/master分支上\n$:git log -p master..origin/master //比较本地的master分支和origin/master分支的区别\n$:git merge origin/master          //合并\n　　Git pull：从远程获取最新版本并merge(合并)到本地\n$:git pull origin master  //相当于进行了 git fetch 和 git merge两部操作\n3、本地删除无效的远程分支：清理远程分支，把本地不存在的远程分支删除\ngit remote prune origin\n\n## 代码回退等\ngit提交之后没有push，代码被覆盖之后恢复\ngit  reflog  通过这个看commit id\ngit reset [commit id] --hard   有时候要删除一个index.lock文件。\n//git 强制拉代码\ngit fetch --all\ngit reset --hard origin/master\ngit pull //可以省略\n\n","source":"_posts/git操作.md","raw":"---\ntitle: git操作\ndate: 2021-11-25 19:03:51\ntags:\n---\n## 1.基础和常用命令\ngit三个区域（工作区，暂存区（git add),版本库(git commit )\n1.git init,git status,git add .,git commit -m 'jilu',git config --global user.email,git config --global user.name\n2.git log/reflog .   git reset --hard '提交编号'\n\n## 2.添加到远程\n第一次添加到远程：\ngit init\ngit remote add origin https://github.com/feixiangsnaik/feixiangsnaik.io.git\ngit pull --rebase origin main\ngit push -u origin main\n\n## 常见报错\n二、常见报错处理\n1、导致报错:error: You have not concluded your merge (MERGE_HEAD exists).的原因可能是在以前pull下来的代码自动合并失败。\n　　解决方案一：保留本地的更改，中止合并->重新合并->重新拉取\n$:git merge --abort\n$:git reset --merge\n$:git pull\n　　git pull之后然后重新解决冲突，再push，（记得需要稍微跟自己push的要有一点区别，要不然又会造成这样的情况）\n　　解决方案二：舍弃本地代码，远端版本覆盖本地版本（慎重）\n$:git fetch --all\n$:git reset --hard origin/master\n$:git fetch\n2、Git fetch和git pull的区别\n　　都可以从远程获取最新版本到本地\n　　git fetch：只是从远程获取最新版本到本地，不会merge(合并)\n$:git fetch origin master   //从远程的origin的master主分支上获取最新版本到origin/master分支上\n$:git log -p master..origin/master //比较本地的master分支和origin/master分支的区别\n$:git merge origin/master          //合并\n　　Git pull：从远程获取最新版本并merge(合并)到本地\n$:git pull origin master  //相当于进行了 git fetch 和 git merge两部操作\n3、本地删除无效的远程分支：清理远程分支，把本地不存在的远程分支删除\ngit remote prune origin\n\n## 代码回退等\ngit提交之后没有push，代码被覆盖之后恢复\ngit  reflog  通过这个看commit id\ngit reset [commit id] --hard   有时候要删除一个index.lock文件。\n//git 强制拉代码\ngit fetch --all\ngit reset --hard origin/master\ngit pull //可以省略\n\n","slug":"git操作","published":1,"updated":"2023-05-28T06:36:19.297Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo5600081s9i0uj4hfr0","content":"<h2 id=\"1-基础和常用命令\"><a href=\"#1-基础和常用命令\" class=\"headerlink\" title=\"1.基础和常用命令\"></a>1.基础和常用命令</h2><p>git三个区域（工作区，暂存区（git add),版本库(git commit )<br>1.git init,git status,git add .,git commit -m ‘jilu’,git config –global user.email,git config –global user.name<br>2.git log/reflog .   git reset –hard ‘提交编号’</p>\n<h2 id=\"2-添加到远程\"><a href=\"#2-添加到远程\" class=\"headerlink\" title=\"2.添加到远程\"></a>2.添加到远程</h2><p>第一次添加到远程：<br>git init<br>git remote add origin <a href=\"https://github.com/feixiangsnaik/feixiangsnaik.io.git\">https://github.com/feixiangsnaik/feixiangsnaik.io.git</a><br>git pull –rebase origin main<br>git push -u origin main</p>\n<h2 id=\"常见报错\"><a href=\"#常见报错\" class=\"headerlink\" title=\"常见报错\"></a>常见报错</h2><p>二、常见报错处理<br>1、导致报错:error: You have not concluded your merge (MERGE_HEAD exists).的原因可能是在以前pull下来的代码自动合并失败。<br>　　解决方案一：保留本地的更改，中止合并-&gt;重新合并-&gt;重新拉取<br>$:git merge –abort<br>$:git reset –merge<br>$:git pull<br>　　git pull之后然后重新解决冲突，再push，（记得需要稍微跟自己push的要有一点区别，要不然又会造成这样的情况）<br>　　解决方案二：舍弃本地代码，远端版本覆盖本地版本（慎重）<br>$:git fetch –all<br>$:git reset –hard origin/master<br>$:git fetch<br>2、Git fetch和git pull的区别<br>　　都可以从远程获取最新版本到本地<br>　　git fetch：只是从远程获取最新版本到本地，不会merge(合并)<br>$:git fetch origin master   //从远程的origin的master主分支上获取最新版本到origin/master分支上<br>$:git log -p master..origin/master //比较本地的master分支和origin/master分支的区别<br>$:git merge origin/master          //合并<br>　　Git pull：从远程获取最新版本并merge(合并)到本地<br>$:git pull origin master  //相当于进行了 git fetch 和 git merge两部操作<br>3、本地删除无效的远程分支：清理远程分支，把本地不存在的远程分支删除<br>git remote prune origin</p>\n<h2 id=\"代码回退等\"><a href=\"#代码回退等\" class=\"headerlink\" title=\"代码回退等\"></a>代码回退等</h2><p>git提交之后没有push，代码被覆盖之后恢复<br>git  reflog  通过这个看commit id<br>git reset [commit id] –hard   有时候要删除一个index.lock文件。<br>//git 强制拉代码<br>git fetch –all<br>git reset –hard origin/master<br>git pull //可以省略</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-基础和常用命令\"><a href=\"#1-基础和常用命令\" class=\"headerlink\" title=\"1.基础和常用命令\"></a>1.基础和常用命令</h2><p>git三个区域（工作区，暂存区（git add),版本库(git commit )<br>1.git init,git status,git add .,git commit -m ‘jilu’,git config –global user.email,git config –global user.name<br>2.git log/reflog .   git reset –hard ‘提交编号’</p>\n<h2 id=\"2-添加到远程\"><a href=\"#2-添加到远程\" class=\"headerlink\" title=\"2.添加到远程\"></a>2.添加到远程</h2><p>第一次添加到远程：<br>git init<br>git remote add origin <a href=\"https://github.com/feixiangsnaik/feixiangsnaik.io.git\">https://github.com/feixiangsnaik/feixiangsnaik.io.git</a><br>git pull –rebase origin main<br>git push -u origin main</p>\n<h2 id=\"常见报错\"><a href=\"#常见报错\" class=\"headerlink\" title=\"常见报错\"></a>常见报错</h2><p>二、常见报错处理<br>1、导致报错:error: You have not concluded your merge (MERGE_HEAD exists).的原因可能是在以前pull下来的代码自动合并失败。<br>　　解决方案一：保留本地的更改，中止合并-&gt;重新合并-&gt;重新拉取<br>$:git merge –abort<br>$:git reset –merge<br>$:git pull<br>　　git pull之后然后重新解决冲突，再push，（记得需要稍微跟自己push的要有一点区别，要不然又会造成这样的情况）<br>　　解决方案二：舍弃本地代码，远端版本覆盖本地版本（慎重）<br>$:git fetch –all<br>$:git reset –hard origin/master<br>$:git fetch<br>2、Git fetch和git pull的区别<br>　　都可以从远程获取最新版本到本地<br>　　git fetch：只是从远程获取最新版本到本地，不会merge(合并)<br>$:git fetch origin master   //从远程的origin的master主分支上获取最新版本到origin/master分支上<br>$:git log -p master..origin/master //比较本地的master分支和origin/master分支的区别<br>$:git merge origin/master          //合并<br>　　Git pull：从远程获取最新版本并merge(合并)到本地<br>$:git pull origin master  //相当于进行了 git fetch 和 git merge两部操作<br>3、本地删除无效的远程分支：清理远程分支，把本地不存在的远程分支删除<br>git remote prune origin</p>\n<h2 id=\"代码回退等\"><a href=\"#代码回退等\" class=\"headerlink\" title=\"代码回退等\"></a>代码回退等</h2><p>git提交之后没有push，代码被覆盖之后恢复<br>git  reflog  通过这个看commit id<br>git reset [commit id] –hard   有时候要删除一个index.lock文件。<br>//git 强制拉代码<br>git fetch –all<br>git reset –hard origin/master<br>git pull //可以省略</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-05-28T06:15:07.944Z","updated":"2023-05-28T06:15:07.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo5700091s9i2yx8gevs","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"less","date":"2021-11-25T03:05:02.000Z","_content":"## 1.混入\n样式混入可以使用混入的方式。\n```\n.common-titile{\n  color:red;\n}\n.title{\n  .common-titile;\n  font-size:20px;\n}\n```","source":"_posts/less.md","raw":"---\ntitle: less\ndate: 2021-11-25 11:05:02\ntags:\n---\n## 1.混入\n样式混入可以使用混入的方式。\n```\n.common-titile{\n  color:red;\n}\n.title{\n  .common-titile;\n  font-size:20px;\n}\n```","slug":"less","published":1,"updated":"2023-05-28T06:15:07.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo58000a1s9i9t90d78z","content":"<h2 id=\"1-混入\"><a href=\"#1-混入\" class=\"headerlink\" title=\"1.混入\"></a>1.混入</h2><p>样式混入可以使用混入的方式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.common-titile&#123;</span><br><span class=\"line\">  color:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.title&#123;</span><br><span class=\"line\">  .common-titile;</span><br><span class=\"line\">  font-size:20px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-混入\"><a href=\"#1-混入\" class=\"headerlink\" title=\"1.混入\"></a>1.混入</h2><p>样式混入可以使用混入的方式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.common-titile&#123;</span><br><span class=\"line\">  color:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.title&#123;</span><br><span class=\"line\">  .common-titile;</span><br><span class=\"line\">  font-size:20px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"markdown学习","date":"2021-11-25T11:54:34.000Z","_content":"- [1.vscode插件  markdown in one使用](#1vscode插件--markdown-in-one使用)\n  - [1.command+shift+p中的快捷命令：](#1commandshiftp中的快捷命令)\n  - [2.常用快捷键](#2常用快捷键)\n- [2.基础语法](#2基础语法)\n## 1.vscode插件  markdown in one使用\n### 1.command+shift+p中的快捷命令：\n    Markdown All in One: Create Table of Contents \n    Markdown All in One: Update Table of Contents \n    Markdown All in One: Add/Update section numbers \n    Markdown All in One: Remove section numbers\n    Markdown All in One: Toggle code span\n    Markdown All in One: Toggle code block\n    Markdown All in One: Print current document to HTML\n    Markdown All in One: Print documents to HTML\n    Markdown All in One: Toggle math environment\n    Markdown All in One: Toggle list\n### 2.常用快捷键\n    Key    Command\n    Ctrl + B    粗体\n    Ctrl + I    斜体    Alt + S    删除线\n    Ctrl + Shift + ]    标题(uplevel)\n    Ctrl + Shift + [    标题(downlevel)\n    Ctrl + M    Toggle math environment\n    Alt + C    Check/Uncheck task list item\n## 2.基础语法\n# 一级标题（注意空格）\n## 二级标题\n> haha \n> heihei \n>>ddd\n\n`buhuanhangbuhuanhangdekuaibuhuanhangdekuaibuhuanhangdekuaibuhuanhangdekuaibuhuanhangdekuaibuhuanhangdekuaidekuai`\n\n![](./../img/testpic.jpg)\n","source":"_posts/markdown学习.md","raw":"---\ntitle: markdown学习\ndate: 2021-11-25 19:54:34\ntags:\n---\n- [1.vscode插件  markdown in one使用](#1vscode插件--markdown-in-one使用)\n  - [1.command+shift+p中的快捷命令：](#1commandshiftp中的快捷命令)\n  - [2.常用快捷键](#2常用快捷键)\n- [2.基础语法](#2基础语法)\n## 1.vscode插件  markdown in one使用\n### 1.command+shift+p中的快捷命令：\n    Markdown All in One: Create Table of Contents \n    Markdown All in One: Update Table of Contents \n    Markdown All in One: Add/Update section numbers \n    Markdown All in One: Remove section numbers\n    Markdown All in One: Toggle code span\n    Markdown All in One: Toggle code block\n    Markdown All in One: Print current document to HTML\n    Markdown All in One: Print documents to HTML\n    Markdown All in One: Toggle math environment\n    Markdown All in One: Toggle list\n### 2.常用快捷键\n    Key    Command\n    Ctrl + B    粗体\n    Ctrl + I    斜体    Alt + S    删除线\n    Ctrl + Shift + ]    标题(uplevel)\n    Ctrl + Shift + [    标题(downlevel)\n    Ctrl + M    Toggle math environment\n    Alt + C    Check/Uncheck task list item\n## 2.基础语法\n# 一级标题（注意空格）\n## 二级标题\n> haha \n> heihei \n>>ddd\n\n`buhuanhangbuhuanhangdekuaibuhuanhangdekuaibuhuanhangdekuaibuhuanhangdekuaibuhuanhangdekuaibuhuanhangdekuaidekuai`\n\n![](./../img/testpic.jpg)\n","slug":"markdown学习","published":1,"updated":"2023-05-28T06:15:07.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo59000b1s9ifscq83md","content":"<ul>\n<li><a href=\"#1vscode%E6%8F%92%E4%BB%B6--markdown-in-one%E4%BD%BF%E7%94%A8\">1.vscode插件  markdown in one使用</a><ul>\n<li><a href=\"#1commandshiftp%E4%B8%AD%E7%9A%84%E5%BF%AB%E6%8D%B7%E5%91%BD%E4%BB%A4\">1.command+shift+p中的快捷命令：</a></li>\n<li><a href=\"#2%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE\">2.常用快捷键</a></li>\n</ul>\n</li>\n<li><a href=\"#2%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95\">2.基础语法</a><h2 id=\"1-vscode插件-markdown-in-one使用\"><a href=\"#1-vscode插件-markdown-in-one使用\" class=\"headerlink\" title=\"1.vscode插件  markdown in one使用\"></a>1.vscode插件  markdown in one使用</h2><h3 id=\"1-command-shift-p中的快捷命令：\"><a href=\"#1-command-shift-p中的快捷命令：\" class=\"headerlink\" title=\"1.command+shift+p中的快捷命令：\"></a>1.command+shift+p中的快捷命令：</h3>  Markdown All in One: Create Table of Contents<br>  Markdown All in One: Update Table of Contents<br>  Markdown All in One: Add/Update section numbers<br>  Markdown All in One: Remove section numbers<br>  Markdown All in One: Toggle code span<br>  Markdown All in One: Toggle code block<br>  Markdown All in One: Print current document to HTML<br>  Markdown All in One: Print documents to HTML<br>  Markdown All in One: Toggle math environment<br>  Markdown All in One: Toggle list<h3 id=\"2-常用快捷键\"><a href=\"#2-常用快捷键\" class=\"headerlink\" title=\"2.常用快捷键\"></a>2.常用快捷键</h3>  Key    Command<br>  Ctrl + B    粗体<br>  Ctrl + I    斜体    Alt + S    删除线<br>  Ctrl + Shift + ]    标题(uplevel)<br>  Ctrl + Shift + [    标题(downlevel)<br>  Ctrl + M    Toggle math environment<br>  Alt + C    Check/Uncheck task list item<h2 id=\"2-基础语法\"><a href=\"#2-基础语法\" class=\"headerlink\" title=\"2.基础语法\"></a>2.基础语法</h2><h1 id=\"一级标题（注意空格）\"><a href=\"#一级标题（注意空格）\" class=\"headerlink\" title=\"一级标题（注意空格）\"></a>一级标题（注意空格）</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><blockquote>\n<p>haha<br>heihei </p>\n<blockquote>\n<p>ddd</p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<p><code>buhuanhangbuhuanhangdekuaibuhuanhangdekuaibuhuanhangdekuaibuhuanhangdekuaibuhuanhangdekuaibuhuanhangdekuaidekuai</code></p>\n<p><img src=\"./../img/testpic.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"#1vscode%E6%8F%92%E4%BB%B6--markdown-in-one%E4%BD%BF%E7%94%A8\">1.vscode插件  markdown in one使用</a><ul>\n<li><a href=\"#1commandshiftp%E4%B8%AD%E7%9A%84%E5%BF%AB%E6%8D%B7%E5%91%BD%E4%BB%A4\">1.command+shift+p中的快捷命令：</a></li>\n<li><a href=\"#2%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE\">2.常用快捷键</a></li>\n</ul>\n</li>\n<li><a href=\"#2%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95\">2.基础语法</a><h2 id=\"1-vscode插件-markdown-in-one使用\"><a href=\"#1-vscode插件-markdown-in-one使用\" class=\"headerlink\" title=\"1.vscode插件  markdown in one使用\"></a>1.vscode插件  markdown in one使用</h2><h3 id=\"1-command-shift-p中的快捷命令：\"><a href=\"#1-command-shift-p中的快捷命令：\" class=\"headerlink\" title=\"1.command+shift+p中的快捷命令：\"></a>1.command+shift+p中的快捷命令：</h3>  Markdown All in One: Create Table of Contents<br>  Markdown All in One: Update Table of Contents<br>  Markdown All in One: Add/Update section numbers<br>  Markdown All in One: Remove section numbers<br>  Markdown All in One: Toggle code span<br>  Markdown All in One: Toggle code block<br>  Markdown All in One: Print current document to HTML<br>  Markdown All in One: Print documents to HTML<br>  Markdown All in One: Toggle math environment<br>  Markdown All in One: Toggle list<h3 id=\"2-常用快捷键\"><a href=\"#2-常用快捷键\" class=\"headerlink\" title=\"2.常用快捷键\"></a>2.常用快捷键</h3>  Key    Command<br>  Ctrl + B    粗体<br>  Ctrl + I    斜体    Alt + S    删除线<br>  Ctrl + Shift + ]    标题(uplevel)<br>  Ctrl + Shift + [    标题(downlevel)<br>  Ctrl + M    Toggle math environment<br>  Alt + C    Check/Uncheck task list item<h2 id=\"2-基础语法\"><a href=\"#2-基础语法\" class=\"headerlink\" title=\"2.基础语法\"></a>2.基础语法</h2><h1 id=\"一级标题（注意空格）\"><a href=\"#一级标题（注意空格）\" class=\"headerlink\" title=\"一级标题（注意空格）\"></a>一级标题（注意空格）</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><blockquote>\n<p>haha<br>heihei </p>\n<blockquote>\n<p>ddd</p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<p><code>buhuanhangbuhuanhangdekuaibuhuanhangdekuaibuhuanhangdekuaibuhuanhangdekuaibuhuanhangdekuaibuhuanhangdekuaidekuai</code></p>\n<p><img src=\"./../img/testpic.jpg\"></p>\n"},{"title":"promise实现","date":"2021-12-22T08:18:48.000Z","_content":"## promise实现\n    // 这里使用es6 class实现\n    class Mypromise {\n      constructor (fn) {\n        // 表示状态\n        this.state = 'pending'\n        // 表示then注册的成功函数\n        this.successFun = []\n        // 表示then注册的失败函数\n        this.failFun = []\n\n    const resolve = val => {\n      // 保持状态改变不可变（resolve和reject只准触发一种）\n      if (this.state !== 'pending') return\n      // 成功触发时机  改变状态 同时执行在then注册的回调事件\n      this.state = 'success'\n      console.log('resolve')\n      // 为了保证then事件先注册（主要是考虑在promise里面写同步代码） promise规范 这里为模拟异步\n      setTimeout(() => {\n        // 执行当前事件里面所有的注册函数\n        console.log('resolve2', val)\n        this.successFun.forEach(item => item.call(this, val))\n      })\n    }\n\n    const reject = err => {\n      if (this.state !== 'pending') return\n      // 失败触发时机  改变状态 同时执行在then注册的回调事件\n      this.state = 'fail'\n      // 为了保证then事件先注册（主要是考虑在promise里面写同步代码） promise规范 这里模拟异步\n      setTimeout(() => {\n        this.failFun.forEach(item => item.call(this, err))\n      })\n    }\n    // 调用函数\n    try {\n      fn(resolve, reject)\n    } catch (error) {\n      reject(error)\n    }\n    }\n\n    // 实例方法 then\n\n    then (resolveCallback, rejectCallback) {\n      console.log('then')\n      // 判断回调是否是函数\n      resolveCallback = typeof resolveCallback !== 'function' ? v => v : resolveCallback\n      rejectCallback =\n        typeof rejectCallback !== 'function'\n          ? err => {\n            throw err\n          }\n          : rejectCallback\n      // 为了保持链式调用  继续返回promise\n      return new Mypromise((resolve, reject) => {\n        // 将回调注册到successFun事件集合里面去\n        this.successFun.push(val => {\n          try {\n            //    执行回调函数\n            const x = resolveCallback(val)\n            // （最难的一点）\n            // 如果回调函数结果是普通值 那么就resolve出去给下一个then链式调用  如果是一个promise对象（代表又是一个异步） 那么调用x的then方法 将resolve和reject传进去 等到x内部的异步 执行完毕的时候（状态完成）就会自动执行传入的resolve 这样就控制了链式调用的顺序\n            x instanceof Mypromise ? x.then(resolve, reject) : resolve(x)\n          } catch (error) {\n            reject(error)\n          }\n        })\n\n        this.failFun.push(val => {\n          try {\n            //    执行回调函数\n            const x = rejectCallback(val)\n            x instanceof Mypromise ? x.then(resolve, reject) : reject(x)\n          } catch (error) {\n            reject(error)\n          }\n        })\n      })\n    }\n\n    // 静态方法\n    static all (promiseArr) {\n      const result = []\n      // 声明一个计数器 每一个promise返回就加一\n      let count = 0\n      return new Mypromise((resolve, reject) => {\n        for (let i = 0; i < promiseArr.length; i++) {\n          promiseArr[i].then(\n            res => {\n              // 这里不能直接push数组  因为要控制顺序一一对应(感谢评论区指正)\n              result[i] = res\n              count++\n              // 只有全部的promise执行成功之后才resolve出去\n              if (count === promiseArr.length) {\n                resolve(result)\n              }\n            },\n            err => {\n              reject(err)\n            }\n          )\n        }\n      })\n    }\n\n    // 静态方法\n    static race (promiseArr) {\n      return new Mypromise((resolve, reject) => {\n        for (let i = 0; i < promiseArr.length; i++) {\n          promiseArr[i].then(\n            res => {\n              // promise数组只要有任何一个promise 状态变更  就可以返回\n              resolve(res)\n            },\n            err => {\n              reject(err)\n            }\n          )\n        }\n      })\n    }\n  }\n\n  // 使用\n  const promise1 = new Mypromise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(123)\n    }, 2000)\n  })\n  const promise2 = new Mypromise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(1234)\n    }, 1000)\n  })\n\n  Mypromise.all([promise1, promise2]).then(res => {\n    console.log(res)\n  })\n\n  Mypromise.race([promise1, promise2]).then(res => {\n    console.log(res)\n  })\n  promise1\n    .then(\n      res => {\n        console.log(res) // 过两秒输出123\n        return new Mypromise((resolve, reject) => {\n          setTimeout(() => {\n            resolve('success')\n          }, 1000)\n        })\n      },\n      err => {\n        console.log(err)\n      }\n    )\n    .then(\n      res => {\n        console.log(res) // 再过一秒输出success\n      },\n      err => {\n        console.log(err)\n      }\n    )\n","source":"_posts/promise实现.md","raw":"---\ntitle: promise实现\ndate: 2021-12-22 16:18:48\ntags:\n---\n## promise实现\n    // 这里使用es6 class实现\n    class Mypromise {\n      constructor (fn) {\n        // 表示状态\n        this.state = 'pending'\n        // 表示then注册的成功函数\n        this.successFun = []\n        // 表示then注册的失败函数\n        this.failFun = []\n\n    const resolve = val => {\n      // 保持状态改变不可变（resolve和reject只准触发一种）\n      if (this.state !== 'pending') return\n      // 成功触发时机  改变状态 同时执行在then注册的回调事件\n      this.state = 'success'\n      console.log('resolve')\n      // 为了保证then事件先注册（主要是考虑在promise里面写同步代码） promise规范 这里为模拟异步\n      setTimeout(() => {\n        // 执行当前事件里面所有的注册函数\n        console.log('resolve2', val)\n        this.successFun.forEach(item => item.call(this, val))\n      })\n    }\n\n    const reject = err => {\n      if (this.state !== 'pending') return\n      // 失败触发时机  改变状态 同时执行在then注册的回调事件\n      this.state = 'fail'\n      // 为了保证then事件先注册（主要是考虑在promise里面写同步代码） promise规范 这里模拟异步\n      setTimeout(() => {\n        this.failFun.forEach(item => item.call(this, err))\n      })\n    }\n    // 调用函数\n    try {\n      fn(resolve, reject)\n    } catch (error) {\n      reject(error)\n    }\n    }\n\n    // 实例方法 then\n\n    then (resolveCallback, rejectCallback) {\n      console.log('then')\n      // 判断回调是否是函数\n      resolveCallback = typeof resolveCallback !== 'function' ? v => v : resolveCallback\n      rejectCallback =\n        typeof rejectCallback !== 'function'\n          ? err => {\n            throw err\n          }\n          : rejectCallback\n      // 为了保持链式调用  继续返回promise\n      return new Mypromise((resolve, reject) => {\n        // 将回调注册到successFun事件集合里面去\n        this.successFun.push(val => {\n          try {\n            //    执行回调函数\n            const x = resolveCallback(val)\n            // （最难的一点）\n            // 如果回调函数结果是普通值 那么就resolve出去给下一个then链式调用  如果是一个promise对象（代表又是一个异步） 那么调用x的then方法 将resolve和reject传进去 等到x内部的异步 执行完毕的时候（状态完成）就会自动执行传入的resolve 这样就控制了链式调用的顺序\n            x instanceof Mypromise ? x.then(resolve, reject) : resolve(x)\n          } catch (error) {\n            reject(error)\n          }\n        })\n\n        this.failFun.push(val => {\n          try {\n            //    执行回调函数\n            const x = rejectCallback(val)\n            x instanceof Mypromise ? x.then(resolve, reject) : reject(x)\n          } catch (error) {\n            reject(error)\n          }\n        })\n      })\n    }\n\n    // 静态方法\n    static all (promiseArr) {\n      const result = []\n      // 声明一个计数器 每一个promise返回就加一\n      let count = 0\n      return new Mypromise((resolve, reject) => {\n        for (let i = 0; i < promiseArr.length; i++) {\n          promiseArr[i].then(\n            res => {\n              // 这里不能直接push数组  因为要控制顺序一一对应(感谢评论区指正)\n              result[i] = res\n              count++\n              // 只有全部的promise执行成功之后才resolve出去\n              if (count === promiseArr.length) {\n                resolve(result)\n              }\n            },\n            err => {\n              reject(err)\n            }\n          )\n        }\n      })\n    }\n\n    // 静态方法\n    static race (promiseArr) {\n      return new Mypromise((resolve, reject) => {\n        for (let i = 0; i < promiseArr.length; i++) {\n          promiseArr[i].then(\n            res => {\n              // promise数组只要有任何一个promise 状态变更  就可以返回\n              resolve(res)\n            },\n            err => {\n              reject(err)\n            }\n          )\n        }\n      })\n    }\n  }\n\n  // 使用\n  const promise1 = new Mypromise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(123)\n    }, 2000)\n  })\n  const promise2 = new Mypromise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(1234)\n    }, 1000)\n  })\n\n  Mypromise.all([promise1, promise2]).then(res => {\n    console.log(res)\n  })\n\n  Mypromise.race([promise1, promise2]).then(res => {\n    console.log(res)\n  })\n  promise1\n    .then(\n      res => {\n        console.log(res) // 过两秒输出123\n        return new Mypromise((resolve, reject) => {\n          setTimeout(() => {\n            resolve('success')\n          }, 1000)\n        })\n      },\n      err => {\n        console.log(err)\n      }\n    )\n    .then(\n      res => {\n        console.log(res) // 再过一秒输出success\n      },\n      err => {\n        console.log(err)\n      }\n    )\n","slug":"promise实现","published":1,"updated":"2023-05-28T06:15:07.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo59000c1s9iasha7lha","content":"<h2 id=\"promise实现\"><a href=\"#promise实现\" class=\"headerlink\" title=\"promise实现\"></a>promise实现</h2><pre><code>// 这里使用es6 class实现\nclass Mypromise &#123;\n  constructor (fn) &#123;\n    // 表示状态\n    this.state = &#39;pending&#39;\n    // 表示then注册的成功函数\n    this.successFun = []\n    // 表示then注册的失败函数\n    this.failFun = []\n\nconst resolve = val =&gt; &#123;\n  // 保持状态改变不可变（resolve和reject只准触发一种）\n  if (this.state !== &#39;pending&#39;) return\n  // 成功触发时机  改变状态 同时执行在then注册的回调事件\n  this.state = &#39;success&#39;\n  console.log(&#39;resolve&#39;)\n  // 为了保证then事件先注册（主要是考虑在promise里面写同步代码） promise规范 这里为模拟异步\n  setTimeout(() =&gt; &#123;\n    // 执行当前事件里面所有的注册函数\n    console.log(&#39;resolve2&#39;, val)\n    this.successFun.forEach(item =&gt; item.call(this, val))\n  &#125;)\n&#125;\n\nconst reject = err =&gt; &#123;\n  if (this.state !== &#39;pending&#39;) return\n  // 失败触发时机  改变状态 同时执行在then注册的回调事件\n  this.state = &#39;fail&#39;\n  // 为了保证then事件先注册（主要是考虑在promise里面写同步代码） promise规范 这里模拟异步\n  setTimeout(() =&gt; &#123;\n    this.failFun.forEach(item =&gt; item.call(this, err))\n  &#125;)\n&#125;\n// 调用函数\ntry &#123;\n  fn(resolve, reject)\n&#125; catch (error) &#123;\n  reject(error)\n&#125;\n&#125;\n\n// 实例方法 then\n\nthen (resolveCallback, rejectCallback) &#123;\n  console.log(&#39;then&#39;)\n  // 判断回调是否是函数\n  resolveCallback = typeof resolveCallback !== &#39;function&#39; ? v =&gt; v : resolveCallback\n  rejectCallback =\n    typeof rejectCallback !== &#39;function&#39;\n      ? err =&gt; &#123;\n        throw err\n      &#125;\n      : rejectCallback\n  // 为了保持链式调用  继续返回promise\n  return new Mypromise((resolve, reject) =&gt; &#123;\n    // 将回调注册到successFun事件集合里面去\n    this.successFun.push(val =&gt; &#123;\n      try &#123;\n        //    执行回调函数\n        const x = resolveCallback(val)\n        // （最难的一点）\n        // 如果回调函数结果是普通值 那么就resolve出去给下一个then链式调用  如果是一个promise对象（代表又是一个异步） 那么调用x的then方法 将resolve和reject传进去 等到x内部的异步 执行完毕的时候（状态完成）就会自动执行传入的resolve 这样就控制了链式调用的顺序\n        x instanceof Mypromise ? x.then(resolve, reject) : resolve(x)\n      &#125; catch (error) &#123;\n        reject(error)\n      &#125;\n    &#125;)\n\n    this.failFun.push(val =&gt; &#123;\n      try &#123;\n        //    执行回调函数\n        const x = rejectCallback(val)\n        x instanceof Mypromise ? x.then(resolve, reject) : reject(x)\n      &#125; catch (error) &#123;\n        reject(error)\n      &#125;\n    &#125;)\n  &#125;)\n&#125;\n\n// 静态方法\nstatic all (promiseArr) &#123;\n  const result = []\n  // 声明一个计数器 每一个promise返回就加一\n  let count = 0\n  return new Mypromise((resolve, reject) =&gt; &#123;\n    for (let i = 0; i &lt; promiseArr.length; i++) &#123;\n      promiseArr[i].then(\n        res =&gt; &#123;\n          // 这里不能直接push数组  因为要控制顺序一一对应(感谢评论区指正)\n          result[i] = res\n          count++\n          // 只有全部的promise执行成功之后才resolve出去\n          if (count === promiseArr.length) &#123;\n            resolve(result)\n          &#125;\n        &#125;,\n        err =&gt; &#123;\n          reject(err)\n        &#125;\n      )\n    &#125;\n  &#125;)\n&#125;\n\n// 静态方法\nstatic race (promiseArr) &#123;\n  return new Mypromise((resolve, reject) =&gt; &#123;\n    for (let i = 0; i &lt; promiseArr.length; i++) &#123;\n      promiseArr[i].then(\n        res =&gt; &#123;\n          // promise数组只要有任何一个promise 状态变更  就可以返回\n          resolve(res)\n        &#125;,\n        err =&gt; &#123;\n          reject(err)\n        &#125;\n      )\n    &#125;\n  &#125;)\n&#125;\n</code></pre>\n<p>  }</p>\n<p>  // 使用<br>  const promise1 = new Mypromise((resolve, reject) =&gt; {<br>    setTimeout(() =&gt; {<br>      resolve(123)<br>    }, 2000)<br>  })<br>  const promise2 = new Mypromise((resolve, reject) =&gt; {<br>    setTimeout(() =&gt; {<br>      resolve(1234)<br>    }, 1000)<br>  })</p>\n<p>  Mypromise.all([promise1, promise2]).then(res =&gt; {<br>    console.log(res)<br>  })</p>\n<p>  Mypromise.race([promise1, promise2]).then(res =&gt; {<br>    console.log(res)<br>  })<br>  promise1<br>    .then(<br>      res =&gt; {<br>        console.log(res) // 过两秒输出123<br>        return new Mypromise((resolve, reject) =&gt; {<br>          setTimeout(() =&gt; {<br>            resolve(‘success’)<br>          }, 1000)<br>        })<br>      },<br>      err =&gt; {<br>        console.log(err)<br>      }<br>    )<br>    .then(<br>      res =&gt; {<br>        console.log(res) // 再过一秒输出success<br>      },<br>      err =&gt; {<br>        console.log(err)<br>      }<br>    )</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"promise实现\"><a href=\"#promise实现\" class=\"headerlink\" title=\"promise实现\"></a>promise实现</h2><pre><code>// 这里使用es6 class实现\nclass Mypromise &#123;\n  constructor (fn) &#123;\n    // 表示状态\n    this.state = &#39;pending&#39;\n    // 表示then注册的成功函数\n    this.successFun = []\n    // 表示then注册的失败函数\n    this.failFun = []\n\nconst resolve = val =&gt; &#123;\n  // 保持状态改变不可变（resolve和reject只准触发一种）\n  if (this.state !== &#39;pending&#39;) return\n  // 成功触发时机  改变状态 同时执行在then注册的回调事件\n  this.state = &#39;success&#39;\n  console.log(&#39;resolve&#39;)\n  // 为了保证then事件先注册（主要是考虑在promise里面写同步代码） promise规范 这里为模拟异步\n  setTimeout(() =&gt; &#123;\n    // 执行当前事件里面所有的注册函数\n    console.log(&#39;resolve2&#39;, val)\n    this.successFun.forEach(item =&gt; item.call(this, val))\n  &#125;)\n&#125;\n\nconst reject = err =&gt; &#123;\n  if (this.state !== &#39;pending&#39;) return\n  // 失败触发时机  改变状态 同时执行在then注册的回调事件\n  this.state = &#39;fail&#39;\n  // 为了保证then事件先注册（主要是考虑在promise里面写同步代码） promise规范 这里模拟异步\n  setTimeout(() =&gt; &#123;\n    this.failFun.forEach(item =&gt; item.call(this, err))\n  &#125;)\n&#125;\n// 调用函数\ntry &#123;\n  fn(resolve, reject)\n&#125; catch (error) &#123;\n  reject(error)\n&#125;\n&#125;\n\n// 实例方法 then\n\nthen (resolveCallback, rejectCallback) &#123;\n  console.log(&#39;then&#39;)\n  // 判断回调是否是函数\n  resolveCallback = typeof resolveCallback !== &#39;function&#39; ? v =&gt; v : resolveCallback\n  rejectCallback =\n    typeof rejectCallback !== &#39;function&#39;\n      ? err =&gt; &#123;\n        throw err\n      &#125;\n      : rejectCallback\n  // 为了保持链式调用  继续返回promise\n  return new Mypromise((resolve, reject) =&gt; &#123;\n    // 将回调注册到successFun事件集合里面去\n    this.successFun.push(val =&gt; &#123;\n      try &#123;\n        //    执行回调函数\n        const x = resolveCallback(val)\n        // （最难的一点）\n        // 如果回调函数结果是普通值 那么就resolve出去给下一个then链式调用  如果是一个promise对象（代表又是一个异步） 那么调用x的then方法 将resolve和reject传进去 等到x内部的异步 执行完毕的时候（状态完成）就会自动执行传入的resolve 这样就控制了链式调用的顺序\n        x instanceof Mypromise ? x.then(resolve, reject) : resolve(x)\n      &#125; catch (error) &#123;\n        reject(error)\n      &#125;\n    &#125;)\n\n    this.failFun.push(val =&gt; &#123;\n      try &#123;\n        //    执行回调函数\n        const x = rejectCallback(val)\n        x instanceof Mypromise ? x.then(resolve, reject) : reject(x)\n      &#125; catch (error) &#123;\n        reject(error)\n      &#125;\n    &#125;)\n  &#125;)\n&#125;\n\n// 静态方法\nstatic all (promiseArr) &#123;\n  const result = []\n  // 声明一个计数器 每一个promise返回就加一\n  let count = 0\n  return new Mypromise((resolve, reject) =&gt; &#123;\n    for (let i = 0; i &lt; promiseArr.length; i++) &#123;\n      promiseArr[i].then(\n        res =&gt; &#123;\n          // 这里不能直接push数组  因为要控制顺序一一对应(感谢评论区指正)\n          result[i] = res\n          count++\n          // 只有全部的promise执行成功之后才resolve出去\n          if (count === promiseArr.length) &#123;\n            resolve(result)\n          &#125;\n        &#125;,\n        err =&gt; &#123;\n          reject(err)\n        &#125;\n      )\n    &#125;\n  &#125;)\n&#125;\n\n// 静态方法\nstatic race (promiseArr) &#123;\n  return new Mypromise((resolve, reject) =&gt; &#123;\n    for (let i = 0; i &lt; promiseArr.length; i++) &#123;\n      promiseArr[i].then(\n        res =&gt; &#123;\n          // promise数组只要有任何一个promise 状态变更  就可以返回\n          resolve(res)\n        &#125;,\n        err =&gt; &#123;\n          reject(err)\n        &#125;\n      )\n    &#125;\n  &#125;)\n&#125;\n</code></pre>\n<p>  }</p>\n<p>  // 使用<br>  const promise1 = new Mypromise((resolve, reject) =&gt; {<br>    setTimeout(() =&gt; {<br>      resolve(123)<br>    }, 2000)<br>  })<br>  const promise2 = new Mypromise((resolve, reject) =&gt; {<br>    setTimeout(() =&gt; {<br>      resolve(1234)<br>    }, 1000)<br>  })</p>\n<p>  Mypromise.all([promise1, promise2]).then(res =&gt; {<br>    console.log(res)<br>  })</p>\n<p>  Mypromise.race([promise1, promise2]).then(res =&gt; {<br>    console.log(res)<br>  })<br>  promise1<br>    .then(<br>      res =&gt; {<br>        console.log(res) // 过两秒输出123<br>        return new Mypromise((resolve, reject) =&gt; {<br>          setTimeout(() =&gt; {<br>            resolve(‘success’)<br>          }, 1000)<br>        })<br>      },<br>      err =&gt; {<br>        console.log(err)<br>      }<br>    )<br>    .then(<br>      res =&gt; {<br>        console.log(res) // 再过一秒输出success<br>      },<br>      err =&gt; {<br>        console.log(err)<br>      }<br>    )</p>\n"},{"title":"socketio","date":"2023-05-28T06:30:15.000Z","_content":"\n## socketio\n\n1. socketio 分为 emit 发送消息，on 为监听接受消息\n","source":"_posts/socketio.md","raw":"---\ntitle: socketio\ndate: 2023-05-28 14:30:15\ntags:\n---\n\n## socketio\n\n1. socketio 分为 emit 发送消息，on 为监听接受消息\n","slug":"socketio","published":1,"updated":"2023-05-28T06:30:43.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo59000d1s9i6mrz2s0j","content":"<h2 id=\"socketio\"><a href=\"#socketio\" class=\"headerlink\" title=\"socketio\"></a>socketio</h2><ol>\n<li>socketio 分为 emit 发送消息，on 为监听接受消息</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"socketio\"><a href=\"#socketio\" class=\"headerlink\" title=\"socketio\"></a>socketio</h2><ol>\n<li>socketio 分为 emit 发送消息，on 为监听接受消息</li>\n</ol>\n"},{"title":"test2","date":"2022-04-08T01:55:59.000Z","_content":"this is test2","source":"_posts/test2.md","raw":"---\ntitle: test2\ndate: 2022-04-08 09:55:59\ntags:\n---\nthis is test2","slug":"test2","published":1,"updated":"2023-05-28T06:15:07.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo5a000e1s9igufh3kbt","content":"<p>this is test2</p>\n","site":{"data":{}},"excerpt":"","more":"<p>this is test2</p>\n"},{"title":"test3","date":"2022-04-08T02:07:03.000Z","_content":"this is test3\n","source":"_posts/test3.md","raw":"---\ntitle: test3\ndate: 2022-04-08 10:07:03\ntags:\n---\nthis is test3\n","slug":"test3","published":1,"updated":"2023-05-28T06:15:07.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo5a000f1s9i7j7v7xhb","content":"<p>this is test3</p>\n","site":{"data":{}},"excerpt":"","more":"<p>this is test3</p>\n"},{"title":"vscodeConfig","date":"2022-03-29T06:26:37.000Z","_content":"\n\n{\n  \"workbench.colorTheme\": \"Community Material Theme\",\n  \"vetur.validation.script\": false,\n  \"vetur.validation.template\": false,\n  \"vetur.validation.style\": false,\n  \"editor.minimap.enabled\": false,\n  \"eslint.enable\": true,\n  \"eslint.autoFixOnSave\": true,\n  \"files.associations\": {\n    \"*.vue\": \"vue\"\n  },\n  \"eslint.options\": {\n    \"extensions\": [\n      \".js\",\n      \".vue\"\n    ]\n  },\n  \"eslint.validate\": [\n    \"javascript\",\n    {\n      \"language\": \"vue\",\n      \"autoFix\": true\n    },\n    \"html\",\n    \"vue\"\n  ],\n  \"git.ignoreMissingGitWarning\": true,\n  \"editor.detectIndentation\": false,\n  \"editor.tabSize\": 2,\n  \"editor.fontSize\": 14,\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n  },\n  \"editor.fontLigatures\": null,\n  \"extensions.ignoreRecommendations\": true,\n  \"git.ignoreLegacyWarning\": true,\n  \"update.mode\": \"none\",\n  \"[vue]\": {\n    \"editor.defaultFormatter\": \"octref.vetur\"\n  },\n  \"[json]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[javascript]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"explorer.confirmDelete\": false,\n  \"[markdown]\": {\n    \"editor.defaultFormatter\": \"yzhang.markdown-all-in-one\"\n  },\n  \"diffEditor.ignoreTrimWhitespace\": false,\n  \"editor.lineNumbers\": \"on\",\n  \"leek-fund.stocks\": [\n    \"sh000001\",\n    \"sh000300\",\n    \"sh000016\",\n    \"sh000688\",\n    \"hk03690\",\n    \"hk00700\",\n    \"usr_ixic\",\n    \"usr_dji\",\n    \"usr_inx\",\n    \"ZC0\",\n    \"sz000799\",\n    \"sh601012\",\n    \"sh600559\",\n    \"sh603499\",\n    \"sh601099\",\n    \"sz002123\",\n    \"sh512690\"\n  ],\n  \"leek-fund.funds\": [\n    [\n      \"002258\",\n      \"001532\",\n      \"002943\",\n      \"001644\",\n      \"180012\",\n      \"000297\"\n    ]\n  ],\n  \"[html]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n}","source":"_posts/vscodeConfig.md","raw":"---\ntitle: vscodeConfig\ndate: 2022-03-29 14:26:37\ntags:\n---\n\n\n{\n  \"workbench.colorTheme\": \"Community Material Theme\",\n  \"vetur.validation.script\": false,\n  \"vetur.validation.template\": false,\n  \"vetur.validation.style\": false,\n  \"editor.minimap.enabled\": false,\n  \"eslint.enable\": true,\n  \"eslint.autoFixOnSave\": true,\n  \"files.associations\": {\n    \"*.vue\": \"vue\"\n  },\n  \"eslint.options\": {\n    \"extensions\": [\n      \".js\",\n      \".vue\"\n    ]\n  },\n  \"eslint.validate\": [\n    \"javascript\",\n    {\n      \"language\": \"vue\",\n      \"autoFix\": true\n    },\n    \"html\",\n    \"vue\"\n  ],\n  \"git.ignoreMissingGitWarning\": true,\n  \"editor.detectIndentation\": false,\n  \"editor.tabSize\": 2,\n  \"editor.fontSize\": 14,\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n  },\n  \"editor.fontLigatures\": null,\n  \"extensions.ignoreRecommendations\": true,\n  \"git.ignoreLegacyWarning\": true,\n  \"update.mode\": \"none\",\n  \"[vue]\": {\n    \"editor.defaultFormatter\": \"octref.vetur\"\n  },\n  \"[json]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"[javascript]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"explorer.confirmDelete\": false,\n  \"[markdown]\": {\n    \"editor.defaultFormatter\": \"yzhang.markdown-all-in-one\"\n  },\n  \"diffEditor.ignoreTrimWhitespace\": false,\n  \"editor.lineNumbers\": \"on\",\n  \"leek-fund.stocks\": [\n    \"sh000001\",\n    \"sh000300\",\n    \"sh000016\",\n    \"sh000688\",\n    \"hk03690\",\n    \"hk00700\",\n    \"usr_ixic\",\n    \"usr_dji\",\n    \"usr_inx\",\n    \"ZC0\",\n    \"sz000799\",\n    \"sh601012\",\n    \"sh600559\",\n    \"sh603499\",\n    \"sh601099\",\n    \"sz002123\",\n    \"sh512690\"\n  ],\n  \"leek-fund.funds\": [\n    [\n      \"002258\",\n      \"001532\",\n      \"002943\",\n      \"001644\",\n      \"180012\",\n      \"000297\"\n    ]\n  ],\n  \"[html]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n}","slug":"vscodeConfig","published":1,"updated":"2023-05-28T06:15:07.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo5a000g1s9igegz3628","content":"<p>{<br>  “workbench.colorTheme”: “Community Material Theme”,<br>  “vetur.validation.script”: false,<br>  “vetur.validation.template”: false,<br>  “vetur.validation.style”: false,<br>  “editor.minimap.enabled”: false,<br>  “eslint.enable”: true,<br>  “eslint.autoFixOnSave”: true,<br>  “files.associations”: {<br>    “*.vue”: “vue”<br>  },<br>  “eslint.options”: {<br>    “extensions”: [<br>      “.js”,<br>      “.vue”<br>    ]<br>  },<br>  “eslint.validate”: [<br>    “javascript”,<br>    {<br>      “language”: “vue”,<br>      “autoFix”: true<br>    },<br>    “html”,<br>    “vue”<br>  ],<br>  “git.ignoreMissingGitWarning”: true,<br>  “editor.detectIndentation”: false,<br>  “editor.tabSize”: 2,<br>  “editor.fontSize”: 14,<br>  “editor.codeActionsOnSave”: {<br>    “source.fixAll.eslint”: true<br>  },<br>  “editor.fontLigatures”: null,<br>  “extensions.ignoreRecommendations”: true,<br>  “git.ignoreLegacyWarning”: true,<br>  “update.mode”: “none”,<br>  “[vue]”: {<br>    “editor.defaultFormatter”: “octref.vetur”<br>  },<br>  “[json]”: {<br>    “editor.defaultFormatter”: “esbenp.prettier-vscode”<br>  },<br>  “[javascript]”: {<br>    “editor.defaultFormatter”: “esbenp.prettier-vscode”<br>  },<br>  “explorer.confirmDelete”: false,<br>  “[markdown]”: {<br>    “editor.defaultFormatter”: “yzhang.markdown-all-in-one”<br>  },<br>  “diffEditor.ignoreTrimWhitespace”: false,<br>  “editor.lineNumbers”: “on”,<br>  “leek-fund.stocks”: [<br>    “sh000001”,<br>    “sh000300”,<br>    “sh000016”,<br>    “sh000688”,<br>    “hk03690”,<br>    “hk00700”,<br>    “usr_ixic”,<br>    “usr_dji”,<br>    “usr_inx”,<br>    “ZC0”,<br>    “sz000799”,<br>    “sh601012”,<br>    “sh600559”,<br>    “sh603499”,<br>    “sh601099”,<br>    “sz002123”,<br>    “sh512690”<br>  ],<br>  “leek-fund.funds”: [<br>    [<br>      “002258”,<br>      “001532”,<br>      “002943”,<br>      “001644”,<br>      “180012”,<br>      “000297”<br>    ]<br>  ],<br>  “[html]”: {<br>    “editor.defaultFormatter”: “esbenp.prettier-vscode”<br>  },<br>}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>{<br>  “workbench.colorTheme”: “Community Material Theme”,<br>  “vetur.validation.script”: false,<br>  “vetur.validation.template”: false,<br>  “vetur.validation.style”: false,<br>  “editor.minimap.enabled”: false,<br>  “eslint.enable”: true,<br>  “eslint.autoFixOnSave”: true,<br>  “files.associations”: {<br>    “*.vue”: “vue”<br>  },<br>  “eslint.options”: {<br>    “extensions”: [<br>      “.js”,<br>      “.vue”<br>    ]<br>  },<br>  “eslint.validate”: [<br>    “javascript”,<br>    {<br>      “language”: “vue”,<br>      “autoFix”: true<br>    },<br>    “html”,<br>    “vue”<br>  ],<br>  “git.ignoreMissingGitWarning”: true,<br>  “editor.detectIndentation”: false,<br>  “editor.tabSize”: 2,<br>  “editor.fontSize”: 14,<br>  “editor.codeActionsOnSave”: {<br>    “source.fixAll.eslint”: true<br>  },<br>  “editor.fontLigatures”: null,<br>  “extensions.ignoreRecommendations”: true,<br>  “git.ignoreLegacyWarning”: true,<br>  “update.mode”: “none”,<br>  “[vue]”: {<br>    “editor.defaultFormatter”: “octref.vetur”<br>  },<br>  “[json]”: {<br>    “editor.defaultFormatter”: “esbenp.prettier-vscode”<br>  },<br>  “[javascript]”: {<br>    “editor.defaultFormatter”: “esbenp.prettier-vscode”<br>  },<br>  “explorer.confirmDelete”: false,<br>  “[markdown]”: {<br>    “editor.defaultFormatter”: “yzhang.markdown-all-in-one”<br>  },<br>  “diffEditor.ignoreTrimWhitespace”: false,<br>  “editor.lineNumbers”: “on”,<br>  “leek-fund.stocks”: [<br>    “sh000001”,<br>    “sh000300”,<br>    “sh000016”,<br>    “sh000688”,<br>    “hk03690”,<br>    “hk00700”,<br>    “usr_ixic”,<br>    “usr_dji”,<br>    “usr_inx”,<br>    “ZC0”,<br>    “sz000799”,<br>    “sh601012”,<br>    “sh600559”,<br>    “sh603499”,<br>    “sh601099”,<br>    “sz002123”,<br>    “sh512690”<br>  ],<br>  “leek-fund.funds”: [<br>    [<br>      “002258”,<br>      “001532”,<br>      “002943”,<br>      “001644”,<br>      “180012”,<br>      “000297”<br>    ]<br>  ],<br>  “[html]”: {<br>    “editor.defaultFormatter”: “esbenp.prettier-vscode”<br>  },<br>}</p>\n"},{"title":"vue知识点","date":"2023-05-28T06:22:45.000Z","_content":"","source":"_posts/vue知识点.md","raw":"---\ntitle: vue知识点\ndate: 2023-05-28 14:22:45\ntags:\n---\n","slug":"vue知识点","published":1,"updated":"2023-05-28T06:31:18.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo5b000h1s9i50oi91hx","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"watermark","date":"2021-12-20T07:50:15.000Z","_content":"## 在util目录下创建watermark.js\n      let watermark = {};\n\n      let id = \"set-customer-watermark-id\";\n\n      let setWatermark = (dom, str) => {\n        if (document.getElementById(id) !== null) {\n          dom\n            ? dom.removeChild(document.getElementById(id))\n            : document.body.removeChild(document.getElementById(id));\n        }\n\n        // 创建一个画布\n        let can = document.createElement(\"canvas\");\n        can.width = 200;\n        can.height = 200;\n\n        // 设置画布样式\n        let cans = can.getContext(\"2d\");\n        cans.rotate((-30 * Math.PI) / 180);\n        cans.font = \"15px Vedana\";\n        cans.fillStyle = \"rgba(0,0,0,0.15)\";\n        cans.textAlign = \"left\";\n        cans.textBaseline = \"Middle\";\n        cans.fillText(str, 0, can.height);\n\n        // 创建整体容器，设置样式\n        let div = document.createElement(\"div\");\n        div.id = id;\n        div.style.pointerEvents = \"none\";\n        div.style.top = \"0px\";\n        div.style.left = \"-100px\";\n        div.style.position = \"absolute\";\n        div.style.zIndex = \"1000\";\n        div.style.width = document.documentElement.clientWidth + \"px\";\n        div.style.height = document.documentElement.clientHeight + \"px\";\n        div.style.background =\n          \"url(\" + can.toDataURL(\"image/png\") + \") left top repeat\";\n\n        dom ? dom.appendChild(div) : document.body.appendChild(div);\n        return id;\n      };\n\n      // 设置水印\n      watermark.set = (dom, str) => {\n        let id = setWatermark(dom, str);\n        setInterval(() => {\n          if (document.getElementById(id) === null) {\n            id = setWatermark(dom, str);\n          }\n        }, 500);\n        window.onresize = () => {\n          setWatermark(dom, str);\n        };\n      };\n\n      // 清除水印\n      watermark.remove = () => {\n        if (document.getElementById(id) !== null) {\n          document.getElementById(id).style.display = \"none\";\n        }\n      };\n\n      export default watermark;\n## 使用\n      <template>\n        <div class=\"home\" id=\"water-mark-content\">\n          <HelloWorld msg=\"Welcome to Your Vue.js App\" />\n        </div>\n      </template>\n\n      <script>\n      // @ is an alias to /src\n      import HelloWorld from \"@/components/HelloWorld.vue\";\n      import Watermark from \"@/utils/lib/watermark\";\n\n      export default {\n        name: \"Home\",\n        components: {\n          HelloWorld,\n        },\n        mounted() {\n          this.setWatermark();\n        },\n        methods: {\n          setWatermark() {\n            const text = `lorretta-2021年9月7日15点37分`;\n            Watermark.set(document.getElementById(\"water-mark-content\"), text);\n          },\n        },\n      };\n      </script>","source":"_posts/watermark.md","raw":"---\ntitle: watermark\ndate: 2021-12-20 15:50:15\ntags:\n---\n## 在util目录下创建watermark.js\n      let watermark = {};\n\n      let id = \"set-customer-watermark-id\";\n\n      let setWatermark = (dom, str) => {\n        if (document.getElementById(id) !== null) {\n          dom\n            ? dom.removeChild(document.getElementById(id))\n            : document.body.removeChild(document.getElementById(id));\n        }\n\n        // 创建一个画布\n        let can = document.createElement(\"canvas\");\n        can.width = 200;\n        can.height = 200;\n\n        // 设置画布样式\n        let cans = can.getContext(\"2d\");\n        cans.rotate((-30 * Math.PI) / 180);\n        cans.font = \"15px Vedana\";\n        cans.fillStyle = \"rgba(0,0,0,0.15)\";\n        cans.textAlign = \"left\";\n        cans.textBaseline = \"Middle\";\n        cans.fillText(str, 0, can.height);\n\n        // 创建整体容器，设置样式\n        let div = document.createElement(\"div\");\n        div.id = id;\n        div.style.pointerEvents = \"none\";\n        div.style.top = \"0px\";\n        div.style.left = \"-100px\";\n        div.style.position = \"absolute\";\n        div.style.zIndex = \"1000\";\n        div.style.width = document.documentElement.clientWidth + \"px\";\n        div.style.height = document.documentElement.clientHeight + \"px\";\n        div.style.background =\n          \"url(\" + can.toDataURL(\"image/png\") + \") left top repeat\";\n\n        dom ? dom.appendChild(div) : document.body.appendChild(div);\n        return id;\n      };\n\n      // 设置水印\n      watermark.set = (dom, str) => {\n        let id = setWatermark(dom, str);\n        setInterval(() => {\n          if (document.getElementById(id) === null) {\n            id = setWatermark(dom, str);\n          }\n        }, 500);\n        window.onresize = () => {\n          setWatermark(dom, str);\n        };\n      };\n\n      // 清除水印\n      watermark.remove = () => {\n        if (document.getElementById(id) !== null) {\n          document.getElementById(id).style.display = \"none\";\n        }\n      };\n\n      export default watermark;\n## 使用\n      <template>\n        <div class=\"home\" id=\"water-mark-content\">\n          <HelloWorld msg=\"Welcome to Your Vue.js App\" />\n        </div>\n      </template>\n\n      <script>\n      // @ is an alias to /src\n      import HelloWorld from \"@/components/HelloWorld.vue\";\n      import Watermark from \"@/utils/lib/watermark\";\n\n      export default {\n        name: \"Home\",\n        components: {\n          HelloWorld,\n        },\n        mounted() {\n          this.setWatermark();\n        },\n        methods: {\n          setWatermark() {\n            const text = `lorretta-2021年9月7日15点37分`;\n            Watermark.set(document.getElementById(\"water-mark-content\"), text);\n          },\n        },\n      };\n      </script>","slug":"watermark","published":1,"updated":"2023-05-28T06:15:07.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo5b000i1s9i18vo75sc","content":"<h2 id=\"在util目录下创建watermark-js\"><a href=\"#在util目录下创建watermark-js\" class=\"headerlink\" title=\"在util目录下创建watermark.js\"></a>在util目录下创建watermark.js</h2><pre><code>  let watermark = &#123;&#125;;\n\n  let id = &quot;set-customer-watermark-id&quot;;\n\n  let setWatermark = (dom, str) =&gt; &#123;\n    if (document.getElementById(id) !== null) &#123;\n      dom\n        ? dom.removeChild(document.getElementById(id))\n        : document.body.removeChild(document.getElementById(id));\n    &#125;\n\n    // 创建一个画布\n    let can = document.createElement(&quot;canvas&quot;);\n    can.width = 200;\n    can.height = 200;\n\n    // 设置画布样式\n    let cans = can.getContext(&quot;2d&quot;);\n    cans.rotate((-30 * Math.PI) / 180);\n    cans.font = &quot;15px Vedana&quot;;\n    cans.fillStyle = &quot;rgba(0,0,0,0.15)&quot;;\n    cans.textAlign = &quot;left&quot;;\n    cans.textBaseline = &quot;Middle&quot;;\n    cans.fillText(str, 0, can.height);\n\n    // 创建整体容器，设置样式\n    let div = document.createElement(&quot;div&quot;);\n    div.id = id;\n    div.style.pointerEvents = &quot;none&quot;;\n    div.style.top = &quot;0px&quot;;\n    div.style.left = &quot;-100px&quot;;\n    div.style.position = &quot;absolute&quot;;\n    div.style.zIndex = &quot;1000&quot;;\n    div.style.width = document.documentElement.clientWidth + &quot;px&quot;;\n    div.style.height = document.documentElement.clientHeight + &quot;px&quot;;\n    div.style.background =\n      &quot;url(&quot; + can.toDataURL(&quot;image/png&quot;) + &quot;) left top repeat&quot;;\n\n    dom ? dom.appendChild(div) : document.body.appendChild(div);\n    return id;\n  &#125;;\n\n  // 设置水印\n  watermark.set = (dom, str) =&gt; &#123;\n    let id = setWatermark(dom, str);\n    setInterval(() =&gt; &#123;\n      if (document.getElementById(id) === null) &#123;\n        id = setWatermark(dom, str);\n      &#125;\n    &#125;, 500);\n    window.onresize = () =&gt; &#123;\n      setWatermark(dom, str);\n    &#125;;\n  &#125;;\n\n  // 清除水印\n  watermark.remove = () =&gt; &#123;\n    if (document.getElementById(id) !== null) &#123;\n      document.getElementById(id).style.display = &quot;none&quot;;\n    &#125;\n  &#125;;\n\n  export default watermark;\n</code></pre>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><pre><code>  &lt;template&gt;\n    &lt;div class=&quot;home&quot; id=&quot;water-mark-content&quot;&gt;\n      &lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot; /&gt;\n    &lt;/div&gt;\n  &lt;/template&gt;\n\n  &lt;script&gt;\n  // @ is an alias to /src\n  import HelloWorld from &quot;@/components/HelloWorld.vue&quot;;\n  import Watermark from &quot;@/utils/lib/watermark&quot;;\n\n  export default &#123;\n    name: &quot;Home&quot;,\n    components: &#123;\n      HelloWorld,\n    &#125;,\n    mounted() &#123;\n      this.setWatermark();\n    &#125;,\n    methods: &#123;\n      setWatermark() &#123;\n        const text = `lorretta-2021年9月7日15点37分`;\n        Watermark.set(document.getElementById(&quot;water-mark-content&quot;), text);\n      &#125;,\n    &#125;,\n  &#125;;\n  &lt;/script&gt;\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"在util目录下创建watermark-js\"><a href=\"#在util目录下创建watermark-js\" class=\"headerlink\" title=\"在util目录下创建watermark.js\"></a>在util目录下创建watermark.js</h2><pre><code>  let watermark = &#123;&#125;;\n\n  let id = &quot;set-customer-watermark-id&quot;;\n\n  let setWatermark = (dom, str) =&gt; &#123;\n    if (document.getElementById(id) !== null) &#123;\n      dom\n        ? dom.removeChild(document.getElementById(id))\n        : document.body.removeChild(document.getElementById(id));\n    &#125;\n\n    // 创建一个画布\n    let can = document.createElement(&quot;canvas&quot;);\n    can.width = 200;\n    can.height = 200;\n\n    // 设置画布样式\n    let cans = can.getContext(&quot;2d&quot;);\n    cans.rotate((-30 * Math.PI) / 180);\n    cans.font = &quot;15px Vedana&quot;;\n    cans.fillStyle = &quot;rgba(0,0,0,0.15)&quot;;\n    cans.textAlign = &quot;left&quot;;\n    cans.textBaseline = &quot;Middle&quot;;\n    cans.fillText(str, 0, can.height);\n\n    // 创建整体容器，设置样式\n    let div = document.createElement(&quot;div&quot;);\n    div.id = id;\n    div.style.pointerEvents = &quot;none&quot;;\n    div.style.top = &quot;0px&quot;;\n    div.style.left = &quot;-100px&quot;;\n    div.style.position = &quot;absolute&quot;;\n    div.style.zIndex = &quot;1000&quot;;\n    div.style.width = document.documentElement.clientWidth + &quot;px&quot;;\n    div.style.height = document.documentElement.clientHeight + &quot;px&quot;;\n    div.style.background =\n      &quot;url(&quot; + can.toDataURL(&quot;image/png&quot;) + &quot;) left top repeat&quot;;\n\n    dom ? dom.appendChild(div) : document.body.appendChild(div);\n    return id;\n  &#125;;\n\n  // 设置水印\n  watermark.set = (dom, str) =&gt; &#123;\n    let id = setWatermark(dom, str);\n    setInterval(() =&gt; &#123;\n      if (document.getElementById(id) === null) &#123;\n        id = setWatermark(dom, str);\n      &#125;\n    &#125;, 500);\n    window.onresize = () =&gt; &#123;\n      setWatermark(dom, str);\n    &#125;;\n  &#125;;\n\n  // 清除水印\n  watermark.remove = () =&gt; &#123;\n    if (document.getElementById(id) !== null) &#123;\n      document.getElementById(id).style.display = &quot;none&quot;;\n    &#125;\n  &#125;;\n\n  export default watermark;\n</code></pre>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><pre><code>  &lt;template&gt;\n    &lt;div class=&quot;home&quot; id=&quot;water-mark-content&quot;&gt;\n      &lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot; /&gt;\n    &lt;/div&gt;\n  &lt;/template&gt;\n\n  &lt;script&gt;\n  // @ is an alias to /src\n  import HelloWorld from &quot;@/components/HelloWorld.vue&quot;;\n  import Watermark from &quot;@/utils/lib/watermark&quot;;\n\n  export default &#123;\n    name: &quot;Home&quot;,\n    components: &#123;\n      HelloWorld,\n    &#125;,\n    mounted() &#123;\n      this.setWatermark();\n    &#125;,\n    methods: &#123;\n      setWatermark() &#123;\n        const text = `lorretta-2021年9月7日15点37分`;\n        Watermark.set(document.getElementById(&quot;water-mark-content&quot;), text);\n      &#125;,\n    &#125;,\n  &#125;;\n  &lt;/script&gt;\n</code></pre>\n"},{"title":"好网站","date":"2021-11-26T01:21:15.000Z","_content":"\n1. [leecode中文站](https://leetcode-cn.com/problemset/all/) https://leetcode-cn.com/problemset/all/","source":"_posts/好网站.md","raw":"---\ntitle: 好网站\ndate: 2021-11-26 09:21:15\ntags:\n---\n\n1. [leecode中文站](https://leetcode-cn.com/problemset/all/) https://leetcode-cn.com/problemset/all/","slug":"好网站","published":1,"updated":"2023-05-28T06:15:07.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo5b000j1s9i32el6h7n","content":"<ol>\n<li><a href=\"https://leetcode-cn.com/problemset/all/\">leecode中文站</a> <a href=\"https://leetcode-cn.com/problemset/all/\">https://leetcode-cn.com/problemset/all/</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><a href=\"https://leetcode-cn.com/problemset/all/\">leecode中文站</a> <a href=\"https://leetcode-cn.com/problemset/all/\">https://leetcode-cn.com/problemset/all/</a></li>\n</ol>\n"},{"title":"正则常用","date":"2021-12-23T07:48:29.000Z","_content":"## 字母数字组合\n```\n^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{8,16}$\n```\n分开来注释一下：\n^ 匹配一行的开头位置\n(?![0-9]+$) 预测该位置后面不全是数字\n(?![a-zA-Z]+$) 预测该位置后面不全是字母\n[0-9A-Za-z] {8,16} 由8-16位数字或这字母组成\n$ 匹配行结尾位置\n\n注：(?!xxxx) 是正则表达式的负向零宽断言一种形式，标识预该位置后不是xxxx字符。\n\n## 不允许输入中文\n```\nconst keyUp = (e, type) => {\n  // eslint-disable-next-line no-param-reassign\n  e.target.value = e.target.value.replace(/[\\u4E00-\\u9FA5]|[\\uFE30-\\uFFA0]/g, '')\n```","source":"_posts/正则常用.md","raw":"---\ntitle: 正则常用\ndate: 2021-12-23 15:48:29\ntags:\n---\n## 字母数字组合\n```\n^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{8,16}$\n```\n分开来注释一下：\n^ 匹配一行的开头位置\n(?![0-9]+$) 预测该位置后面不全是数字\n(?![a-zA-Z]+$) 预测该位置后面不全是字母\n[0-9A-Za-z] {8,16} 由8-16位数字或这字母组成\n$ 匹配行结尾位置\n\n注：(?!xxxx) 是正则表达式的负向零宽断言一种形式，标识预该位置后不是xxxx字符。\n\n## 不允许输入中文\n```\nconst keyUp = (e, type) => {\n  // eslint-disable-next-line no-param-reassign\n  e.target.value = e.target.value.replace(/[\\u4E00-\\u9FA5]|[\\uFE30-\\uFFA0]/g, '')\n```","slug":"正则常用","published":1,"updated":"2023-05-28T06:15:07.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo5c000k1s9i7sw7e5no","content":"<h2 id=\"字母数字组合\"><a href=\"#字母数字组合\" class=\"headerlink\" title=\"字母数字组合\"></a>字母数字组合</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]&#123;8,16&#125;$</span><br></pre></td></tr></table></figure>\n<p>分开来注释一下：<br>^ 匹配一行的开头位置<br>(?![0-9]+$) 预测该位置后面不全是数字<br>(?![a-zA-Z]+$) 预测该位置后面不全是字母<br>[0-9A-Za-z] {8,16} 由8-16位数字或这字母组成<br>$ 匹配行结尾位置</p>\n<p>注：(?!xxxx) 是正则表达式的负向零宽断言一种形式，标识预该位置后不是xxxx字符。</p>\n<h2 id=\"不允许输入中文\"><a href=\"#不允许输入中文\" class=\"headerlink\" title=\"不允许输入中文\"></a>不允许输入中文</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const keyUp = (e, type) =&gt; &#123;</span><br><span class=\"line\">  // eslint-disable-next-line no-param-reassign</span><br><span class=\"line\">  e.target.value = e.target.value.replace(/[\\u4E00-\\u9FA5]|[\\uFE30-\\uFFA0]/g, &#x27;&#x27;)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"字母数字组合\"><a href=\"#字母数字组合\" class=\"headerlink\" title=\"字母数字组合\"></a>字母数字组合</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]&#123;8,16&#125;$</span><br></pre></td></tr></table></figure>\n<p>分开来注释一下：<br>^ 匹配一行的开头位置<br>(?![0-9]+$) 预测该位置后面不全是数字<br>(?![a-zA-Z]+$) 预测该位置后面不全是字母<br>[0-9A-Za-z] {8,16} 由8-16位数字或这字母组成<br>$ 匹配行结尾位置</p>\n<p>注：(?!xxxx) 是正则表达式的负向零宽断言一种形式，标识预该位置后不是xxxx字符。</p>\n<h2 id=\"不允许输入中文\"><a href=\"#不允许输入中文\" class=\"headerlink\" title=\"不允许输入中文\"></a>不允许输入中文</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const keyUp = (e, type) =&gt; &#123;</span><br><span class=\"line\">  // eslint-disable-next-line no-param-reassign</span><br><span class=\"line\">  e.target.value = e.target.value.replace(/[\\u4E00-\\u9FA5]|[\\uFE30-\\uFFA0]/g, &#x27;&#x27;)</span><br></pre></td></tr></table></figure>"},{"title":"系统服务器命令","date":"2023-05-28T09:43:25.000Z","_content":"## windows激活命令 （win11可用）\n1.打开管理员终端cmd窗口，输入下面代码，然后弹出选项 选1\n```\nirm https://massgrave.dev/get | iex\n```","source":"_posts/系统服务器命令.md","raw":"---\ntitle: 系统服务器命令\ndate: 2023-05-28 17:43:25\ntags:\n---\n## windows激活命令 （win11可用）\n1.打开管理员终端cmd窗口，输入下面代码，然后弹出选项 选1\n```\nirm https://massgrave.dev/get | iex\n```","slug":"系统服务器命令","published":1,"updated":"2023-05-28T09:45:38.928Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo5c000l1s9idaj05ofu","content":"<h2 id=\"windows激活命令-（win11可用）\"><a href=\"#windows激活命令-（win11可用）\" class=\"headerlink\" title=\"windows激活命令 （win11可用）\"></a>windows激活命令 （win11可用）</h2><p>1.打开管理员终端cmd窗口，输入下面代码，然后弹出选项 选1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">irm https://massgrave.dev/get | iex</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"windows激活命令-（win11可用）\"><a href=\"#windows激活命令-（win11可用）\" class=\"headerlink\" title=\"windows激活命令 （win11可用）\"></a>windows激活命令 （win11可用）</h2><p>1.打开管理员终端cmd窗口，输入下面代码，然后弹出选项 选1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">irm https://massgrave.dev/get | iex</span><br></pre></td></tr></table></figure>"},{"title":"防抖节流","date":"2021-12-22T08:24:36.000Z","_content":"## 防抖节流\n```\n// 防抖\nfunction debounce(fn, delay=300) {\n  //默认300毫秒\n  let timer;\n  return function() {\n    var args = arguments;\n    if (timer) {\n      clearTimeout(timer);\n    }\n    timer = setTimeout(() => {\n      fn.apply(this, args); // 改变this指向为调用debounce所指的对象\n    }, delay);\n  };\n}\n\nwindow.addEventListener(\n  \"scroll\",\n  debance(() => {\n    console.log(111);\n  }, 1000)\n);\n\n// 节流\n//方法一：设置一个标志\nfunction throttle(fn, delay) {\n  let flag = true;\n  return () => {\n    if (!flag) return;\n    flag = false;\n    timer = setTimeout(() => {\n      fn();\n      flag = true;\n    }, delay);\n  };\n}\n//方法二：使用时间戳\nfunction throttle(fn, delay) {\n  let startTime = new Date();\n  return () => {\n    let endTime = new Date();\n    if (endTime - startTime >= delay) {\n      fn();\n      startTime = endTime;\n    } else {\n      return;\n    }\n  };\n}\nwindow.addEventListener(\n  \"scroll\",\n  throttle(() => {\n    console.log(111);\n  }, 1000)\n);\n```\n","source":"_posts/防抖节流.md","raw":"---\ntitle: 防抖节流\ndate: 2021-12-22 16:24:36\ntags:\n---\n## 防抖节流\n```\n// 防抖\nfunction debounce(fn, delay=300) {\n  //默认300毫秒\n  let timer;\n  return function() {\n    var args = arguments;\n    if (timer) {\n      clearTimeout(timer);\n    }\n    timer = setTimeout(() => {\n      fn.apply(this, args); // 改变this指向为调用debounce所指的对象\n    }, delay);\n  };\n}\n\nwindow.addEventListener(\n  \"scroll\",\n  debance(() => {\n    console.log(111);\n  }, 1000)\n);\n\n// 节流\n//方法一：设置一个标志\nfunction throttle(fn, delay) {\n  let flag = true;\n  return () => {\n    if (!flag) return;\n    flag = false;\n    timer = setTimeout(() => {\n      fn();\n      flag = true;\n    }, delay);\n  };\n}\n//方法二：使用时间戳\nfunction throttle(fn, delay) {\n  let startTime = new Date();\n  return () => {\n    let endTime = new Date();\n    if (endTime - startTime >= delay) {\n      fn();\n      startTime = endTime;\n    } else {\n      return;\n    }\n  };\n}\nwindow.addEventListener(\n  \"scroll\",\n  throttle(() => {\n    console.log(111);\n  }, 1000)\n);\n```\n","slug":"防抖节流","published":1,"updated":"2023-05-28T06:15:07.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cli78jo5d000m1s9ibbgid22o","content":"<h2 id=\"防抖节流\"><a href=\"#防抖节流\" class=\"headerlink\" title=\"防抖节流\"></a>防抖节流</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 防抖</span><br><span class=\"line\">function debounce(fn, delay=300) &#123;</span><br><span class=\"line\">  //默认300毫秒</span><br><span class=\"line\">  let timer;</span><br><span class=\"line\">  return function() &#123;</span><br><span class=\"line\">    var args = arguments;</span><br><span class=\"line\">    if (timer) &#123;</span><br><span class=\"line\">      clearTimeout(timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      fn.apply(this, args); // 改变this指向为调用debounce所指的对象</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">window.addEventListener(</span><br><span class=\"line\">  &quot;scroll&quot;,</span><br><span class=\"line\">  debance(() =&gt; &#123;</span><br><span class=\"line\">    console.log(111);</span><br><span class=\"line\">  &#125;, 1000)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">// 节流</span><br><span class=\"line\">//方法一：设置一个标志</span><br><span class=\"line\">function throttle(fn, delay) &#123;</span><br><span class=\"line\">  let flag = true;</span><br><span class=\"line\">  return () =&gt; &#123;</span><br><span class=\"line\">    if (!flag) return;</span><br><span class=\"line\">    flag = false;</span><br><span class=\"line\">    timer = setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      fn();</span><br><span class=\"line\">      flag = true;</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//方法二：使用时间戳</span><br><span class=\"line\">function throttle(fn, delay) &#123;</span><br><span class=\"line\">  let startTime = new Date();</span><br><span class=\"line\">  return () =&gt; &#123;</span><br><span class=\"line\">    let endTime = new Date();</span><br><span class=\"line\">    if (endTime - startTime &gt;= delay) &#123;</span><br><span class=\"line\">      fn();</span><br><span class=\"line\">      startTime = endTime;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.addEventListener(</span><br><span class=\"line\">  &quot;scroll&quot;,</span><br><span class=\"line\">  throttle(() =&gt; &#123;</span><br><span class=\"line\">    console.log(111);</span><br><span class=\"line\">  &#125;, 1000)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"防抖节流\"><a href=\"#防抖节流\" class=\"headerlink\" title=\"防抖节流\"></a>防抖节流</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 防抖</span><br><span class=\"line\">function debounce(fn, delay=300) &#123;</span><br><span class=\"line\">  //默认300毫秒</span><br><span class=\"line\">  let timer;</span><br><span class=\"line\">  return function() &#123;</span><br><span class=\"line\">    var args = arguments;</span><br><span class=\"line\">    if (timer) &#123;</span><br><span class=\"line\">      clearTimeout(timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      fn.apply(this, args); // 改变this指向为调用debounce所指的对象</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">window.addEventListener(</span><br><span class=\"line\">  &quot;scroll&quot;,</span><br><span class=\"line\">  debance(() =&gt; &#123;</span><br><span class=\"line\">    console.log(111);</span><br><span class=\"line\">  &#125;, 1000)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">// 节流</span><br><span class=\"line\">//方法一：设置一个标志</span><br><span class=\"line\">function throttle(fn, delay) &#123;</span><br><span class=\"line\">  let flag = true;</span><br><span class=\"line\">  return () =&gt; &#123;</span><br><span class=\"line\">    if (!flag) return;</span><br><span class=\"line\">    flag = false;</span><br><span class=\"line\">    timer = setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      fn();</span><br><span class=\"line\">      flag = true;</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//方法二：使用时间戳</span><br><span class=\"line\">function throttle(fn, delay) &#123;</span><br><span class=\"line\">  let startTime = new Date();</span><br><span class=\"line\">  return () =&gt; &#123;</span><br><span class=\"line\">    let endTime = new Date();</span><br><span class=\"line\">    if (endTime - startTime &gt;= delay) &#123;</span><br><span class=\"line\">      fn();</span><br><span class=\"line\">      startTime = endTime;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.addEventListener(</span><br><span class=\"line\">  &quot;scroll&quot;,</span><br><span class=\"line\">  throttle(() =&gt; &#123;</span><br><span class=\"line\">    console.log(111);</span><br><span class=\"line\">  &#125;, 1000)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}